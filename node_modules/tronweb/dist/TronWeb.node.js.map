{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@babel/runtime/helpers/asyncToGenerator\"","webpack:///external \"@babel/runtime/helpers/classCallCheck\"","webpack:///external \"@babel/runtime/helpers/createClass\"","webpack:///external \"@babel/runtime/helpers/objectSpread\"","webpack:///external \"ethers\"","webpack:///external \"@babel/runtime/helpers/toConsumableArray\"","webpack:///external \"@babel/runtime/helpers/slicedToArray\"","webpack:///external \"bignumber.js\"","webpack:///external \"@babel/runtime/helpers/assertThisInitialized\"","webpack:///external \"@babel/runtime/helpers/defineProperty\"","webpack:///external \"@babel/runtime/helpers/typeof\"","webpack:///external \"js-sha3\"","webpack:///external \"elliptic\"","webpack:///external \"@babel/runtime/helpers/possibleConstructorReturn\"","webpack:///external \"@babel/runtime/helpers/getPrototypeOf\"","webpack:///external \"@babel/runtime/helpers/inherits\"","webpack:///external \"axios\"","webpack:///external \"jssha\"","webpack:///external \"validator\"","webpack:///external \"eventemitter3\"","webpack:///external \"querystring\"","webpack:///./src/utils/base64.js","webpack:///./src/utils/bytes.js","webpack:///./src/utils/address.js","webpack:///./src/utils/code.js","webpack:///./src/utils/base58.js","webpack:///./src/utils/crypto.js","webpack:///./src/utils/accounts.js","webpack:///./src/utils/abi.js","webpack:///./src/utils/index.js","webpack:///./src/lib/providers/index.js","webpack:///./src/lib/providers/HttpProvider.js","webpack:///./src/lib/transactionBuilder.js","webpack:///./src/lib/trx.js","webpack:///./src/lib/contract/method.js","webpack:///./src/lib/contract/index.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Base64","_this","this","_keyStr","encode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","length","charCodeAt","isNaN","charAt","encodeIgnoreUtf8","inputBytes","decode","replace","indexOf","String","fromCharCode","_utf8_decode","decodeToByteArray","_out2ByteArray","utftext","byteArray","Array","_utf8_encode","string","c2","c3","byte2hexStr","byte","Error","str","bytesToString","arr","one","toString","v","match","bytesLength","store","slice","st","parseInt","hextoString","hex","split","out","tmp","concat","byteArray2hexStr","base64DecodeFromString","string64","base64EncodeToString","bytes","ADDRESS_SIZE","ADDRESS_PREFIX","ADDRESS_PREFIX_BYTE","bin2String","array","arrayEquals","array1","array2","strict","JSON","stringify","stringToBytes","len","push","hexChar2byte","isHexChar","hexStr2byteArray","j","k","strToDate","test","tempStrs","dateStrs","year","month","day","timeStrs","hour","minute","second","Date","isNumber","getStringType","ALPHABET","ALPHABET_MAP","BASE","encode58","buffer","digits","carry","reverse","map","digit","join","decode58","getBase58CheckAddress","addressBytes","hash0","SHA256","checkSum","decodeBase58Address","base58Sting","address","offset","checkSum1","signTransaction","priKeyBytes","transaction","signature","ECKeySign","txID","arrayToBase64String","a","btoa","apply","toConsumableArray_default","signBytes","privateKey","contents","getRowBytesFromTransactionBase64","base64Data","bytesDecode","proto","protocol","Transaction","deserializeBinary","getRawData","serializeBinary","genPriKey","priKeyHex","EC","genKeyPair","getPrivate","computeAddress","pubBytes","hash","keccak256","substring","getAddressFromPriKey","getPubKeyFromPriKey","decode58Check","addressStr","decodeCheck","decodeData","hash1","isAddressValid","base58Str","getBase58CheckAddressFromPriKeyBase64String","priKeyBase64String","getHexStrAddressFromPriKeyBase64String","getAddressFromPriKeyBase64String","pubkey","keyFromPrivate","getPublic","x","y","xHex","yHex","hashBytes","sign","id","recoveryParam","rHex","sHex","msgBytes","shaObj","jsSHA","msgHex","update","getHash","passwordToAddress","password","pkToAddress","generateAccount","pubKeyBytes","publicKey","base58","abiCoder","Ethers","AbiCoder","decodeParams","names","types","ignoreMethodHash","reduce","obj","arg","index","substr","toLowerCase","encodeParams","values","TronWeb","toHex","utils","isValidURL","url","validator","isURL","protocols","isObject","isArray","isJson","parse","ex","isBoolean","bool","isBigNumber","number","BigNumber","constructor","isString","isFunction","isHex","isInteger","Number","hasProperty","hasProperties","_len","arguments","properties","_key","includes","injectPromise","func","_len2","args","_key2","Promise","resolve","reject","err","res","promiseInjector","scope","_this2","_len3","_key3","mapEvent","event","block","block_number","timestamp","block_timestamp","contract","contract_address","event_name","transaction_id","result","resourceNode","resource_Node","parseEvent","_ref","abi","inputs","type","_abi$index","padLeft","padding","amount","isNotNullOrUndefined","val","src_utils","objectSpread_default","code","accounts","crypto","providers","HttpProvider","host","timeout","undefined","user","headers","statusPage","classCallCheck_default","instance","axios","baseURL","auth","request","then","data","catch","payload","method","keys","params","TransactionBuilder","tronWeb","callback","message","toUtf8","to","from","defaultAddress","isAddress","fullNode","to_address","owner_address","_resultManager","sendTrx","tokenID","fromUtf8","asset_name","sendToken","_this3","issuerAddress","buyer","purchaseToken","_this4","duration","resource","receiverAddress","freezeBalance","frozen_balance","frozen_duration","receiver_address","_this5","unfreezeBalance","_this6","withdrawBlockRewards","_this7","applyForSR","_this8","votes","voterAddress","vote","invalid","entries","_ref2","slicedToArray_default","srAddress","voteCount","vote_address","vote_count","_this9","options","createSmartContract","feeLimit","userFeePercentage","originEnergyLimit","callValue","tokenValue","tokenId","token_id","_options$abi","_options$bytecode","bytecode","_options$parameters","parameters","_options$name","_unused","payable","some","constructorParams","find","it","fee_limit","call_value","consume_user_resource_percent","origin_energy_limit","parameter","call_token_value","typeof_default","splice","_triggerSmartContract","contractAddress","functionSelector","_this10","_Object$assign","assign","_parameters$i","function_selector","_this11","createToken","_options$name2","_options$abbreviation","abbreviation","_options$description","description","_options$url","_options$totalSupply","totalSupply","_options$trxRatio","trxRatio","_options$tokenRatio","tokenRatio","_options$saleStart","saleStart","now","_options$saleEnd","saleEnd","_options$freeBandwidt","freeBandwidth","_options$freeBandwidt2","freeBandwidthLimit","_options$frozenAmount","frozenAmount","_options$frozenDurati","frozenDuration","voteScore","precision","abbr","total_supply","trx_num","num","start_time","end_time","free_asset_net_limit","public_free_asset_net_limit","frozen_supply","frozen_amount","frozen_days","vote_score","_this12","accountName","account_name","updateAccount","_this13","updateToken","_options$description2","_options$url2","_options$freeBandwidt3","_options$freeBandwidt4","new_limit","new_public_limit","_this14","createProposal","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","return","_this15","proposalID","proposal_id","deleteProposal","_this16","isApproval","is_add_approval","voteProposal","tokenName","tokenBalance","trxBalance","ownerAddress","first_token_id","first_token_balance","second_token_id","second_token_balance","resources","createTRXExchange","firstTokenName","firstTokenBalance","secondTokenName","secondTokenBalance","_this17","exchangeID","tokenAmount","exchange_id","quant","injectExchangeTokens","_this18","withdrawExchangeTokens","_this19","tokenAmountSold","tokenAmountExpected","fromAscii","expected","tradeExchangeTokens","_this20","updateSetting","_this21","updateEnergyLimit","Trx","token","getCurrentBlock","defaultBlock","getBlockByHash","getBlockByNumber","getBlock","blockHash","blockID","getBlockTransactionCount","_ref$transactions","transactions","_ref2$transactions","getTransactionFromBlock","transactionID","getTransaction","getConfirmedTransaction","solidityNode","getTransactionInfo","limit","getTransactionsRelated","getTransactionsToAddress","getTransactionsFromAddress","direction","all","tx","sort","b","raw_data","_context","t0","account","_ref5","getAccount","getBalance","_ref6","_ref6$balance","balance","getUnconfirmedAccount","getUnconfirmedBalance","_ref7","_ref7$balance","_ref8","_ref8$freeNetUsed","freeNetUsed","_ref8$freeNetLimit","freeNetLimit","_ref8$NetUsed","NetUsed","_ref8$NetLimit","NetLimit","getBandwidth","_ref9","_ref9$assetIssue","assetIssue","tokens","parseToken","getTokensIssuedByAddress","getTokenFromID","listNodes","_ref10","_ref10$nodes","nodes","_ref11","_ref11$address","port","start","end","startNum","endNum","_ref12","_ref12$block","getBlockRange","listSuperRepresentatives","_ref13","_ref13$witnesses","witnesses","_ref15","_ref15$assetIssue","_ref14","_ref14$assetIssue","listTokens","timeUntilNextVoteCycle","_ref16","_ref16$num","Math","floor","getContract","useTronHeader","verifyMessage","messageBytes","toUtf8Bytes","messageDigest","recovered","recoverAddress","tronAddress","fromHex","defaultPrivateKey","signingKey","SigningKey","signDigest","signatureHex","_context3","fromPrivateKey","t1","signedTransaction","sendRawTransaction","sendTransaction","transactionBuilder","_context4","_context5","_context6","_context7","_context8","proposal","getProposal","listProposals","_ref17","_ref17$proposals","proposals","getChainParameters","_ref18","_ref18$chainParameter","chainParameter","getAccountResources","exchange","getExchangeByID","listExchanges","_ref19","_ref19$exchanges","exchanges","_ref20","_ref20$exchanges","getNodeInfo","info","getTokenListByName","getTokenByID","getFunctionSelector","getParamTypes","decodeOutput","filter","_ref3","Method","outputs","sha3","defaultOptions","shouldPollResponse","forEach","methodArgs","_call","send","_send","watch","_watch","deployed","stateMutability","triggerSmartContract","constant_result","msg","msg2","chunk","trx","broadcast","error","checkResult","_callee2","decoded","_args2","regenerator_default","wrap","_context2","prev","abrupt","sent","setTimeout","resMessage","contractResult","stop","eventServer","listener","lastBlock","sinceTimestamp","getTime","getEvents","_callee4","events","_events$sort","_events$sort2","latestEvent","newEvents","getEventResult","RegExp","priorEvent","bindListener","clearInterval","setInterval","Contract","eventListener","methods","methodInstances","props","loadAbi","eventCallback","_getEvents","console","__proto__","prop","methodCall","onMethod","methodName","inputData","decodeInput","new","at","entrys","self","startCallback","_startEventListener","_stopEventListener","possibleConstructorReturn_default","getPrototypeOf_default","setFullNode","setSolidityNode","setEventServer","setPrivateKey","assertThisInitialized_default","abs","setAddress","emit","provider","knownProvider","isValidProvider","setStatusPage","isConnected","currentProviders","eventName","blockNumber","size","page","_getEventResult","onlyConfirmed","onlyUnconfirmed","previousLastEventFingerprint","routeParams","warn","qs","since","querystring","response","getEventByTransactionID","fromDecimal","isFinite","Buffer","padEnd","toBigNumber","toNumber","isLessThan","sun","div","times","_unused2","EventEmitter"],"mappings":"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","file":"TronWeb.node.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 22);\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@babel/runtime/helpers/asyncToGenerator\");","module.exports = require(\"@babel/runtime/helpers/classCallCheck\");","module.exports = require(\"@babel/runtime/helpers/createClass\");","module.exports = require(\"@babel/runtime/helpers/objectSpread\");","module.exports = require(\"ethers\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"bignumber.js\");","module.exports = require(\"@babel/runtime/helpers/assertThisInitialized\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"js-sha3\");","module.exports = require(\"elliptic\");","module.exports = require(\"@babel/runtime/helpers/possibleConstructorReturn\");","module.exports = require(\"@babel/runtime/helpers/getPrototypeOf\");","module.exports = require(\"@babel/runtime/helpers/inherits\");","module.exports = require(\"axios\");","module.exports = require(\"jssha\");","module.exports = require(\"validator\");","module.exports = require(\"eventemitter3\");","module.exports = require(\"querystring\");","export function Base64() {\n    this._keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    this.encode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < input.length) {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if(isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if(isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.encodeIgnoreUtf8 = inputBytes => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        while (i < inputBytes.length) {\n            chr1 = inputBytes[i++];\n            chr2 = inputBytes[i++];\n            chr3 = inputBytes[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if(isNaN(chr2))\n                enc3 = enc4 = 64;\n            else if(isNaN(chr3))\n                enc4 = 64;\n\n            output = output +\n                this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\n                this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n        }\n\n        return output;\n    }\n\n    this.decode = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if(enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if(enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._utf8_decode(output);\n    }\n\n    this.decodeToByteArray = input => {\n        let output = \"\";\n        let chr1;\n        let chr2;\n        let chr3;\n        let enc1;\n        let enc2;\n        let enc3;\n        let enc4;\n        let i = 0;\n\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        while (i < input.length) {\n            enc1 = this._keyStr.indexOf(input.charAt(i++));\n            enc2 = this._keyStr.indexOf(input.charAt(i++));\n            enc3 = this._keyStr.indexOf(input.charAt(i++));\n            enc4 = this._keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if(enc3 != 64)\n                output = output + String.fromCharCode(chr2);\n\n            if(enc4 != 64)\n                output = output + String.fromCharCode(chr3);\n        }\n\n        return this._out2ByteArray(output);\n    }\n\n    this._out2ByteArray = utftext => {\n        const byteArray = new Array(utftext.length);\n\n        let i = 0;\n        let c = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n            byteArray[i] = c;\n            i++;\n        }\n\n        return byteArray;\n    }\n\n    this._utf8_encode = string => {\n        string = string.replace(/\\r\\n/g, \"\\n\");\n        let utftext = \"\";\n\n        for(let n = 0; n < string.length; n++) {\n            const c = string.charCodeAt(n);\n\n            if(c < 128) {\n                utftext += String.fromCharCode(c);\n            } else if((c > 127) && (c < 2048)) {\n                utftext += String.fromCharCode((c >> 6) | 192);\n                utftext += String.fromCharCode((c & 63) | 128);\n            } else {\n                utftext += String.fromCharCode((c >> 12) | 224);\n                utftext += String.fromCharCode(((c >> 6) & 63) | 128);\n                utftext += String.fromCharCode((c & 63) | 128);\n            }\n        }\n\n        return utftext;\n    }\n\n    this._utf8_decode = utftext => {\n        let string = \"\";\n        let i = 0;\n        let c = 0;\n        let c2 = 0;\n        let c3 = 0;\n\n        while (i < utftext.length) {\n            c = utftext.charCodeAt(i);\n\n            if(c < 128) {\n                string += String.fromCharCode(c);\n                i++;\n            } else if((c > 191) && (c < 224)) {\n                c2 = utftext.charCodeAt(i + 1);\n                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n                i += 2;\n            } else {\n                c2 = utftext.charCodeAt(i + 1);\n                c3 = utftext.charCodeAt(i + 2);\n\n                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n\n                i += 3;\n            }\n        }\n\n        return string;\n    }\n}\n","import {Base64} from './base64';\n\nexport function byte2hexStr(byte) {\n    if(typeof byte !== 'number')\n        throw new Error('Input must be a number');\n\n    if(byte < 0 || byte > 255)\n        throw new Error('Input must be a byte');\n\n    const hexByteMap = '0123456789ABCDEF';\n\n    let str = '';\n    str += hexByteMap.charAt(byte >> 4);\n    str += hexByteMap.charAt(byte & 0x0f);\n\n    return str;\n}\n\nexport function bytesToString(arr) {\n    if(typeof arr === 'string')\n        return arr;\n\n    let str = '';\n\n    for(let i = 0; i < arr.length; i++) {\n        const one = arr[i].toString(2);\n        const v = one.match(/^1+?(?=0)/);\n\n        if(v && one.length === 8) {\n            const bytesLength = v[0].length;\n            let store = arr[i].toString(2).slice(7 - bytesLength);\n\n            for(let st = 1; st < bytesLength; st++)\n                store += arr[st + i].toString(2).slice(2);\n\n            str += String.fromCharCode(parseInt(store, 2));\n            i += bytesLength - 1;\n        } else {\n            str += String.fromCharCode(arr[i]);\n        }\n    }\n\n    return str;\n}\n\nexport function hextoString(hex) {\n    const arr = hex.replace(/^0x/, '').split('');\n    let out = '';\n\n    for(let i = 0; i < arr.length / 2; i++) {\n        let tmp = `0x${ arr[i * 2] }${ arr[i * 2 + 1] }`;\n        out += String.fromCharCode(tmp);\n    }\n\n    return out;\n}\n\nexport function byteArray2hexStr(byteArray) {\n    let str = '';\n\n    for(let i = 0; i < (byteArray.length); i++)\n        str += byte2hexStr(byteArray[i]);\n\n    return str;\n}\n\nexport function base64DecodeFromString(string64) {\n    return new Base64().decodeToByteArray(string64);\n}\n\nexport function base64EncodeToString(bytes) {\n    const b = new Base64();\n    const string64 = b.encodeIgnoreUtf8(bytes);\n\n    return string64\n}\n\n","export const ADDRESS_SIZE = 34;\nexport const ADDRESS_PREFIX = \"41\";\nexport const ADDRESS_PREFIX_BYTE = 0x41;\n","import {\n    byte2hexStr,\n    bytesToString,\n    hextoString,\n    byteArray2hexStr,\n    base64DecodeFromString,\n    base64EncodeToString\n} from './bytes';\n\nexport function bin2String(array) {\n    // TODO Do we need this alias?\n    return bytesToString(array);\n}\n\nexport function arrayEquals(array1, array2, strict) {\n    if(array1.length != array2.length)\n        return false;\n\n    let i;\n\n    for(i = 0; i < array1.length; i++) {\n        if(strict) {\n            if(array1[i] != array2[i])\n                return false;\n        } else if(JSON.stringify(array1[i]) != JSON.stringify(array2[i]))\n            return false;\n    }\n\n    return true;\n}\n\nexport function stringToBytes(str) {\n\n    if(typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const bytes = new Array();\n    let len;\n    let c;\n\n    len = str.length;\n\n    for(let i = 0; i < len; i++) {\n        c = str.charCodeAt(i);\n\n        if(c >= 0x010000 && c <= 0x10FFFF) {\n            bytes.push(((c >> 18) & 0x07) | 0xF0);\n            bytes.push(((c >> 12) & 0x3F) | 0x80);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if(c >= 0x000800 && c <= 0x00FFFF) {\n            bytes.push(((c >> 12) & 0x0F) | 0xE0);\n            bytes.push(((c >> 6) & 0x3F) | 0x80);\n            bytes.push((c & 0x3F) | 0x80);\n        } else if(c >= 0x000080 && c <= 0x0007FF) {\n            bytes.push(((c >> 6) & 0x1F) | 0xC0);\n            bytes.push((c & 0x3F) | 0x80);\n        } else bytes.push(c & 0xFF);\n    }\n\n    return bytes;\n}\n\nexport {byte2hexStr, bytesToString, hextoString, byteArray2hexStr, base64DecodeFromString, base64EncodeToString}\n\nexport function hexChar2byte(c) {\n    let d;\n\n    if(c >= 'A' && c <= 'F')\n        d = c.charCodeAt(0) - 'A'.charCodeAt(0) + 10;\n    else if(c >= 'a' && c <= 'f')\n        d = c.charCodeAt(0) - 'a'.charCodeAt(0) + 10;\n    else if(c >= '0' && c <= '9')\n        d = c.charCodeAt(0) - '0'.charCodeAt(0);\n\n    if(typeof d === 'number')\n        return d;\n    else\n        throw new Error('The passed hex char is not a valid hex char');\n}\n\nexport function isHexChar(c) {\n    if((c >= 'A' && c <= 'F') ||\n        (c >= 'a' && c <= 'f') ||\n        (c >= '0' && c <= '9')) {\n        return 1;\n    }\n\n    return 0;\n}\n\nexport function hexStr2byteArray(str) {\n    if(typeof str !== 'string')\n        throw new Error('The passed string is not a string')\n\n    const byteArray = Array();\n    let d = 0;\n    let j = 0;\n    let k = 0;\n\n    for(let i = 0; i < str.length; i++) {\n        const c = str.charAt(i);\n\n        if(isHexChar(c)) {\n            d <<= 4;\n            d += hexChar2byte(c);\n            j++;\n\n            if(0 === (j % 2)) {\n                byteArray[k++] = d;\n                d = 0;\n            }\n        } else\n            throw new Error('The passed hex char is not a valid hex string')\n    }\n\n    return byteArray;\n}\n\n//yyyy-MM-DD HH-mm-ss\nexport function strToDate(str) {\n\n    if(!/^\\d{4}-\\d{2}-\\d{2}( \\d{2}-\\d{2}-\\d{2}|)/.test(str))\n        throw new Error('The passed date string is not valid')\n\n    const tempStrs = str.split(\" \");\n    const dateStrs = tempStrs[0].split(\"-\");\n    const year = parseInt(dateStrs[0], 10);\n    const month = parseInt(dateStrs[1], 10) - 1;\n    const day = parseInt(dateStrs[2], 10);\n\n    if(tempStrs.length > 1) {\n        const timeStrs = tempStrs[1].split(\"-\");\n        const hour = parseInt(timeStrs[0], 10);\n        const minute = parseInt(timeStrs[1], 10);\n        const second = parseInt(timeStrs[2], 10);\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    return new Date(year, month, day);\n}\n\nexport function isNumber(c) {\n    if(c >= '0' && c <= '9')\n        return 1;\n\n    return 0;\n}\n\n//return 1: address  --- 20Bytes HexString\n//return 2: blockNumber ------ Decimal number\n//return 3: assetName ------ String\n//return other: error\nexport function getStringType(str) {\n    if(null == str)\n        return -1;\n\n    if(typeof (str) != 'string')\n        return -1;\n\n    if(str.length == 0 || str == \"\")\n        return -1;\n\n    let i = 0;\n\n    // TODO Should we return 1 if someone passes a full, 42-chars long address?\n    // if (str.length == 42 && /^41/.test(str)) {\n    //     for (; i < 40; i++) {\n    //         var c = str.charAt(i+2);\n    //\n    //         if (!isHexChar(c))\n    //             break;\n    //     }\n    // } else\n    if(str.length == 40) {\n        for(; i < 40; i++) {\n            var c = str.charAt(i);\n\n            if(!isHexChar(c))\n                break;\n        }\n    }\n\n    if(i == 40)\n        return 1; //40 Hex, Address\n\n    for(i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if(!isNumber(c))\n            break;\n    }\n\n    if(i == str.length)\n        return 2; // All Decimal number, BlockNumber\n\n    for(i = 0; i < str.length; i++) {\n        var c = str.charAt(i);\n\n        if(c > ' ')\n            return 3; // At least one visible character\n    }\n\n    return -1;\n}\n","const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\nconst ALPHABET_MAP = {};\n\nfor(let i = 0; i < ALPHABET.length; i++)\n    ALPHABET_MAP[ALPHABET.charAt(i)] = i;\n\nconst BASE = 58;\n\nexport function encode58(buffer) {\n    if(buffer.length === 0)\n        return '';\n\n    let i;\n    let j;\n\n    const digits = [0];\n\n    for(i = 0; i < buffer.length; i++) {\n        for(j = 0; j < digits.length; j++)\n            digits[j] <<= 8;\n\n        digits[0] += buffer[i];\n        let carry = 0;\n\n        for(j = 0; j < digits.length; ++j) {\n            digits[j] += carry;\n            carry = (digits[j] / BASE) | 0;\n            digits[j] %= BASE\n        }\n\n        while (carry) {\n            digits.push(carry % BASE);\n            carry = (carry / BASE) | 0\n        }\n    }\n\n    for(i = 0; buffer[i] === 0 && i < buffer.length - 1; i++)\n        digits.push(0);\n\n    return digits.reverse().map(digit => ALPHABET[digit]).join('');\n}\n\nexport function decode58(string) {\n    if(string.length === 0)\n        return [];\n\n    let i;\n    let j;\n\n    const bytes = [0];\n\n    for(i = 0; i < string.length; i++) {\n        const c = string[i];\n\n        if(!(c in ALPHABET_MAP))\n            throw new Error('Non-base58 character');\n\n        for(j = 0; j < bytes.length; j++)\n            bytes[j] *= BASE;\n\n        bytes[0] += ALPHABET_MAP[c];\n        let carry = 0;\n\n        for(j = 0; j < bytes.length; ++j) {\n            bytes[j] += carry;\n            carry = bytes[j] >> 8;\n            bytes[j] &= 0xff;\n        }\n\n        while (carry) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n        }\n    }\n\n    for(i = 0; string[i] === '1' && i < string.length - 1; i++)\n        bytes.push(0);\n\n    return bytes.reverse();\n}\n","import jsSHA from 'jssha';\n\nimport {ADDRESS_PREFIX, ADDRESS_PREFIX_BYTE, ADDRESS_SIZE} from './address';\nimport {base64EncodeToString} from './code';\nimport {base64DecodeFromString, hexStr2byteArray} from './code';\nimport {encode58, decode58} from './base58';\nimport {keccak256} from 'js-sha3';\nimport {byte2hexStr, byteArray2hexStr} from './bytes';\nimport {ec as EC} from 'elliptic';\n\nexport function getBase58CheckAddress(addressBytes) {\n    const hash0 = SHA256(addressBytes);\n    const hash1 = SHA256(hash0);\n\n    let checkSum = hash1.slice(0, 4);\n    checkSum = addressBytes.concat(checkSum);\n\n    return encode58(checkSum);\n}\n\nexport function decodeBase58Address(base58Sting) {\n    if(typeof (base58Sting) != 'string')\n        return false;\n\n    if(base58Sting.length <= 4)\n        return false;\n\n    let address = decode58(base58Sting);\n\n    if(base58Sting.length <= 4)\n        return false;\n\n    const len = address.length;\n    const offset = len - 4;\n    const checkSum = address.slice(offset);\n\n    address = address.slice(0, offset);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if(checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return address;\n    }\n\n    throw new Error('Invalid address provided');\n}\n\nexport function signTransaction(priKeyBytes, transaction) {\n    if(typeof priKeyBytes === 'string')\n        priKeyBytes = hexStr2byteArray(priKeyBytes);\n\n    const txID = transaction.txID;\n    const signature = ECKeySign(hexStr2byteArray(txID), priKeyBytes);\n\n    transaction.signature = [signature];\n    return transaction;\n}\n\nexport function arrayToBase64String(a) {\n    return btoa(String.fromCharCode(...a));\n}\n\nexport function signBytes(privateKey, contents) {\n    if(typeof privateKey === 'string')\n        privateKey = hexStr2byteArray(privateKey);\n\n    const hashBytes = SHA256(contents);\n    const signBytes = ECKeySign(hashBytes, privateKey);\n\n    return signBytes;\n}\n\nexport function getRowBytesFromTransactionBase64(base64Data) {\n    const bytesDecode = base64DecodeFromString(base64Data);\n    const transaction = proto.protocol.Transaction.deserializeBinary(bytesDecode);\n    const raw = transaction.getRawData();\n\n    return raw.serializeBinary();\n}\n\nexport function genPriKey() {\n    const ec = new EC('secp256k1');\n    const key = ec.genKeyPair();\n    const priKey = key.getPrivate();\n\n    let priKeyHex = priKey.toString('hex');\n\n    while (priKeyHex.length < 64) {\n        priKeyHex = `0${priKeyHex}`;\n    }\n\n    return hexStr2byteArray(priKeyHex);\n}\n\nexport function computeAddress(pubBytes) {\n    if(pubBytes.length === 65)\n        pubBytes = pubBytes.slice(1);\n\n    const hash = keccak256(pubBytes).toString();\n    const addressHex = ADDRESS_PREFIX + hash.substring(24);\n\n    return hexStr2byteArray(addressHex);\n}\n\nexport function getAddressFromPriKey(priKeyBytes) {\n    let pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    return computeAddress(pubBytes);\n}\n\nexport function decode58Check(addressStr) {\n    const decodeCheck = decode58(addressStr);\n\n    if(decodeCheck.length <= 4)\n        return false;\n\n    const decodeData = decodeCheck.slice(0, decodeCheck.length - 4);\n    const hash0 = SHA256(decodeData);\n    const hash1 = SHA256(hash0);\n\n    if(hash1[0] === decodeCheck[decodeData.length] &&\n        hash1[1] === decodeCheck[decodeData.length + 1] &&\n        hash1[2] === decodeCheck[decodeData.length + 2] &&\n        hash1[3] === decodeCheck[decodeData.length + 3]) {\n        return decodeData;\n    }\n\n    return false;\n}\n\nexport function isAddressValid(base58Str) {\n    if(typeof (base58Str) !== 'string')\n        return false;\n\n    if(base58Str.length !== ADDRESS_SIZE)\n        return false;\n\n    let address = decode58(base58Str);\n\n    if(address.length !== 25)\n        return false;\n\n    if(address[0] !== ADDRESS_PREFIX_BYTE)\n        return false;\n\n    const checkSum = address.slice(21);\n    address = address.slice(0, 21);\n\n    const hash0 = SHA256(address);\n    const hash1 = SHA256(hash0);\n    const checkSum1 = hash1.slice(0, 4);\n\n    if(checkSum[0] == checkSum1[0] && checkSum[1] == checkSum1[1] && checkSum[2] ==\n        checkSum1[2] && checkSum[3] == checkSum1[3]\n    ) {\n        return true\n    }\n\n    return false;\n}\n\nexport function getBase58CheckAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n\n    return getBase58CheckAddress(addressBytes);\n}\n\nexport function getHexStrAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressHex = byteArray2hexStr(addressBytes);\n\n    return addressHex;\n}\n\nexport function getAddressFromPriKeyBase64String(priKeyBase64String) {\n    const priKeyBytes = base64DecodeFromString(priKeyBase64String);\n    const pubBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = computeAddress(pubBytes);\n    const addressBase64 = base64EncodeToString(addressBytes);\n\n    return addressBase64;\n}\n\nexport function getPubKeyFromPriKey(priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const pubkey = key.getPublic();\n    const x = pubkey.x;\n    const y = pubkey.y;\n\n    let xHex = x.toString('hex');\n\n    while (xHex.length < 64) {\n        xHex = `0${xHex}`;\n    }\n\n    let yHex = y.toString('hex');\n\n    while (yHex.length < 64) {\n        yHex = `0${yHex}`;\n    }\n\n    const pubkeyHex = `04${xHex}${yHex}`;\n    const pubkeyBytes = hexStr2byteArray(pubkeyHex);\n\n    return pubkeyBytes;\n}\n\nexport function ECKeySign(hashBytes, priKeyBytes) {\n    const ec = new EC('secp256k1');\n    const key = ec.keyFromPrivate(priKeyBytes, 'bytes');\n    const signature = key.sign(hashBytes);\n    const r = signature.r;\n    const s = signature.s;\n    const id = signature.recoveryParam;\n\n    let rHex = r.toString('hex');\n\n    while (rHex.length < 64) {\n        rHex = `0${rHex}`;\n    }\n\n    let sHex = s.toString('hex');\n\n    while (sHex.length < 64) {\n        sHex = `0${sHex}`;\n    }\n\n    const idHex = byte2hexStr(id);\n    const signHex = rHex + sHex + idHex;\n\n    return signHex;\n}\n\nexport function SHA256(msgBytes) {\n    const shaObj = new jsSHA('SHA-256', 'HEX');\n    const msgHex = byteArray2hexStr(msgBytes);\n\n    shaObj.update(msgHex);\n    const hashHex = shaObj.getHash('HEX');\n\n    return hexStr2byteArray(hashHex);\n}\n\nexport function passwordToAddress(password) {\n    const com_priKeyBytes = base64DecodeFromString(password);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n\nexport function pkToAddress(privateKey) {\n    const com_priKeyBytes = hexStr2byteArray(privateKey);\n    const com_addressBytes = getAddressFromPriKey(com_priKeyBytes);\n\n    return getBase58CheckAddress(com_addressBytes);\n}\n","import {byteArray2hexStr} from './bytes';\nimport {\n    getBase58CheckAddress,\n    genPriKey,\n    getAddressFromPriKey,\n    getPubKeyFromPriKey\n} from './crypto';\n\nexport function generateAccount() {\n    const priKeyBytes = genPriKey();\n    const pubKeyBytes = getPubKeyFromPriKey(priKeyBytes);\n    const addressBytes = getAddressFromPriKey(priKeyBytes);\n\n    const privateKey = byteArray2hexStr(priKeyBytes);\n    const publicKey = byteArray2hexStr(pubKeyBytes);\n\n    return {\n        privateKey,\n        publicKey,\n        address: {\n            base58: getBase58CheckAddress(addressBytes),\n            hex: byteArray2hexStr(addressBytes)\n        }\n    }\n}\n","import * as Ethers from 'ethers';\nimport TronWeb from 'index';\n\nconst abiCoder = new Ethers.utils.AbiCoder();\n\nexport function decodeParams(names, types, output, ignoreMethodHash) {\n\n    if(!output || typeof output === 'boolean') {\n        ignoreMethodHash = output;\n        output = types;\n        types = names;\n        names = [];\n    }\n\n    if(ignoreMethodHash && output.replace(/^0x/, '').length % 64 === 8)\n        output = '0x' + output.replace(/^0x/, '').substring(8);\n\n    if(output.replace(/^0x/, '').length % 64)\n        throw new Error('The encoded string is not valid. Its length must be a multiple of 64.');\n\n    return abiCoder.decode(types, output).reduce((obj, arg, index) => {\n        if(types[index] == 'address')\n            arg = '41' + arg.substr(2).toLowerCase();\n\n        if(names.length)\n            obj[names[index]] = arg;\n        else obj.push(arg);\n\n        return obj;\n    }, names.length ? {} : []);\n}\n\nexport function encodeParams(types, values) {\n\n    for(let i = 0; i < types.length; i++) {\n        if(types[i] === 'address') {\n            values[i] = TronWeb.address.toHex(values[i]).replace(/^41/, '0x');\n        }\n    }\n\n    return abiCoder.encode(types, values);\n}\n","import * as accounts from './accounts';\nimport * as base58 from './base58';\nimport * as bytes from './bytes';\nimport * as crypto from './crypto';\nimport * as code from './code';\nimport * as abi from './abi';\n\nimport validator from 'validator';\nimport BigNumber from 'bignumber.js';\n\nconst utils = {\n    isValidURL(url) {\n        if(typeof url !== 'string')\n            return false;\n        return validator.isURL(url.toString(), {\n            protocols: ['http', 'https']\n        });\n    },\n\n    isObject(obj) {\n        return obj === Object(obj) && Object.prototype.toString.call(obj) !== '[object Array]';\n    },\n\n    isArray(array) {\n        return Array.isArray(array);\n    },\n\n    isJson(string) {\n        try {\n            return !!JSON.parse(string);\n        } catch (ex) {\n            return false;\n        }\n    },\n\n    isBoolean(bool) {\n        return typeof bool === 'boolean';\n    },\n\n    isBigNumber(number) {\n        return number && (number instanceof BigNumber || (number.constructor && number.constructor.name === 'BigNumber'));\n    },\n\n    isString(string) {\n        return typeof string === 'string' || (string && string.constructor && string.constructor.name === 'String');\n    },\n\n    isFunction(obj) {\n        return typeof obj === 'function';\n    },\n\n    isHex(string) {\n        return (typeof string === 'string'\n            && !isNaN(parseInt(string, 16))\n            && /^(0x|)[a-fA-F0-9]+$/.test(string));\n    },\n\n    isInteger(number) {\n        if(number === null)\n            return false\n        return Number.isInteger(\n            Number(number)\n        );\n    },\n\n    hasProperty(obj, property) {\n        return Object.prototype.hasOwnProperty.call(obj, property);\n    },\n\n    hasProperties(obj, ...properties) {\n        return properties.length && !properties.map(property => {\n            return this.hasProperty(obj, property)\n        }).includes(false);\n    },\n\n    injectPromise(func, ...args) {\n        return new Promise((resolve, reject) => {\n            func(...args, (err, res) => {\n                if(err)\n                    reject(err);\n                else resolve(res);\n            });\n        });\n    },\n\n    promiseInjector(scope) {\n        return (func, ...args) => {\n            return this.injectPromise(func.bind(scope), ...args);\n        }\n    },\n\n    mapEvent(event) {\n        return {\n            block: event.block_number,\n            timestamp: event.block_timestamp,\n            contract: event.contract_address,\n            name: event.event_name,\n            transaction: event.transaction_id,\n            result: event.result,\n            resourceNode: event.resource_Node\n        };\n    },\n\n    parseEvent(event, {inputs: abi}) {\n        if(!event.result)\n            return event;\n\n        if(this.isObject(event.result)) {\n            for(var i = 0; i < abi.length; i++) {\n                let obj = abi[i];\n                if(obj.type == 'address' && obj.name in event.result)\n                    event.result[obj.name] = '41' + event.result[obj.name].substr(2).toLowerCase();\n            }\n        } else if(this.isArray(event.result)) {\n            event.result = event.result.reduce((obj, result, index) => {\n                const {\n                    name,\n                    type\n                } = abi[index];\n\n                if(type == 'address')\n                    result = '41' + result.substr(2).toLowerCase();\n\n                obj[name] = result;\n\n                return obj;\n            }, {});\n        }\n\n        return event;\n    },\n\n    padLeft(input, padding, amount) {\n        let res = input.toString();\n\n        while (res.length < amount)\n            res = padding + res;\n\n        return res;\n    },\n\n    isNotNullOrUndefined(val) {\n        return val !== null && typeof val !== 'undefined';\n    }\n}\n\nexport default {\n    ...utils,\n    code,\n    accounts,\n    base58,\n    bytes,\n    crypto,\n    abi\n};\n","import HttpProvider from './HttpProvider';\n\nexport default {\n    HttpProvider\n};","import axios from 'axios';\nimport utils from 'utils';\n\nexport default class HttpProvider {\n    constructor(host, timeout = 30000, user = false, password = false, headers = {}, statusPage = '/') {\n        if(!utils.isValidURL(host))\n            throw new Error('Invalid URL provided to HttpProvider');\n\n        if(isNaN(timeout) || timeout < 0)\n            throw new Error('Invalid timeout duration provided');\n\n        if(!utils.isObject(headers))\n            throw new Error('Invalid headers object provided');\n\n        host = host.replace(/\\/+$/, '');\n\n        this.host = host;\n        this.timeout = timeout;\n        this.user = user;\n        this.password = password;\n        this.headers = headers;\n        this.statusPage = statusPage;\n\n        this.instance = axios.create({\n            baseURL: host,\n            timeout: timeout,\n            headers: headers,\n            auth: user && {\n                user,\n                password\n            },\n        });\n    }\n\n    setStatusPage(statusPage = '/') {\n        this.statusPage = statusPage;\n    }\n\n    async isConnected(statusPage = this.statusPage) {\n        return this.request(statusPage).then(data => {\n            return utils.hasProperties(data, 'blockID', 'block_header');\n        }).catch(() => false);\n    }\n\n    request(url, payload = {}, method = 'get') {\n        method = method.toLowerCase();\n\n        return this.instance.request({\n            data: method == 'post' && Object.keys(payload).length ? payload : null,\n            params: method == 'get' && payload,\n            url,\n            method\n        }).then(({data}) => data);\n    }\n};\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\n\n\nexport default class TransactionBuilder {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    _resultManager(transaction, callback) {\n        if(transaction.Error)\n            return callback(transaction.Error);\n\n        if(transaction.result && transaction.result.message) {\n            return callback(\n                this.tronWeb.toUtf8(transaction.result.message)\n            );\n        }\n        callback(null, transaction);\n    }\n\n    sendTrx(to = false, amount = 0, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendTrx, to, amount, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer TRX to the same account');\n\n        this.tronWeb.fullNode.request('wallet/createtransaction', {\n            to_address: to,\n            owner_address: from,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendToken(to = false, amount = 0, tokenID = false, from = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(from)) {\n            callback = from;\n            from = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, from);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient address provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!this.tronWeb.isAddress(from))\n            return callback('Invalid origin address provided');\n\n        to = this.tronWeb.address.toHex(to);\n        tokenID = this.tronWeb.fromUtf8(tokenID);\n        from = this.tronWeb.address.toHex(from);\n\n        if(to === from)\n            return callback('Cannot transfer tokens to the same account');\n\n        this.tronWeb.fullNode.request('wallet/transferasset', {\n            to_address: to,\n            owner_address: from,\n            asset_name: tokenID,\n            amount: parseInt(amount)\n        }, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    purchaseToken(issuerAddress = false, tokenID = false, amount = 0, buyer = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(buyer)) {\n            callback = buyer;\n            buyer = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.purchaseToken, issuerAddress, tokenID, amount, buyer);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!this.tronWeb.isAddress(buyer))\n            return callback('Invalid buyer address provided');\n\n        this.tronWeb.fullNode.request('wallet/participateassetissue', {\n            to_address: this.tronWeb.address.toHex(issuerAddress),\n            owner_address: this.tronWeb.address.toHex(buyer),\n            asset_name: this.tronWeb.fromUtf8(tokenID),\n            amount: parseInt(amount)\n        }, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, callback = false) {\n        if(utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, address, receiverAddress);\n\n        if(!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(utils.isNotNullOrUndefined(receiverAddress) && !this.tronWeb.isAddress(receiverAddress))\n            return callback('Invalid receiver address provided');\n\n        const data = {\n            owner_address: this.tronWeb.address.toHex(address),\n            frozen_balance: parseInt(amount),\n            frozen_duration: parseInt(duration),\n            resource: resource\n        }\n\n        if(utils.isNotNullOrUndefined(receiverAddress)) {\n            data.receiver_address = this.tronWeb.address.toHex(receiverAddress)\n        }\n\n        this.tronWeb.fullNode.request('wallet/freezebalance', data, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    unfreezeBalance(resource = \"BANDWIDTH\", address = this.tronWeb.defaultAddress.hex, receiverAddress = undefined, callback = false) {\n        if(utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, address, receiverAddress);\n\n        if(!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(utils.isNotNullOrUndefined(receiverAddress) && !this.tronWeb.isAddress(receiverAddress))\n            return callback('Invalid receiver address provided');\n\n        const data = {\n            owner_address: this.tronWeb.address.toHex(address),\n            resource: resource\n        }\n\n        if(utils.isNotNullOrUndefined(receiverAddress)) {\n            data.receiver_address = this.tronWeb.address.toHex(receiverAddress)\n        }\n\n        this.tronWeb.fullNode.request('wallet/unfreezebalance', data, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    withdrawBlockRewards(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawBlockRewards, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/withdrawbalance', {\n            owner_address: this.tronWeb.address.toHex(address)\n        }, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    applyForSR(address = this.tronWeb.defaultAddress.hex, url = false, callback = false) {\n        if(utils.isValidURL(address)) {\n            callback = url || false;\n            url = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.applyForSR, address, url);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isValidURL(url))\n            return callback('Invalid url provided');\n\n        this.tronWeb.fullNode.request('wallet/createwitness', {\n            owner_address: this.tronWeb.address.toHex(address),\n            url: this.tronWeb.fromUtf8(url)\n        }, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    vote(votes = {}, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.vote, votes, voterAddress);\n\n        if(!utils.isObject(votes) || !Object.keys(votes).length)\n            return callback('Invalid votes object provided');\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voter address provided');\n\n        let invalid = false;\n\n        votes = Object.entries(votes).map(([srAddress, voteCount]) => {\n            if(invalid)\n                return;\n\n            if(!this.tronWeb.isAddress(srAddress)) {\n                callback('Invalid SR address provided: ' + srAddress);\n                return invalid = true;\n            }\n\n            if(!utils.isInteger(voteCount) || voteCount <= 0) {\n                callback('Invalid vote count provided for SR: ' + srAddress);\n                return invalid = true;\n            }\n\n            return {\n                vote_address: this.tronWeb.address.toHex(srAddress),\n                vote_count: parseInt(voteCount)\n            };\n        });\n\n        if(invalid)\n            return;\n\n        this.tronWeb.fullNode.request('wallet/votewitnessaccount', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            votes\n        }, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    createSmartContract(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createSmartContract, options, issuerAddress);\n\n        const feeLimit = options.feeLimit || 1_000_000_000;\n        const userFeePercentage = options.userFeePercentage || 100;\n        const originEnergyLimit = options.originEnergyLimit || 10_000_000;\n        const callValue = options.callValue || 0;\n        const tokenValue = options.tokenValue;\n        const tokenId = options.tokenId || options.token_id;\n\n        let {\n            abi = false,\n            bytecode = false,\n            parameters = [],\n            name = \"\"\n        } = options;\n\n\n        if(abi && utils.isString(abi)) {\n            try {\n                abi = JSON.parse(abi);\n            } catch {\n                return callback('Invalid options.abi provided');\n            }\n        }\n\n        if(!utils.isArray(abi))\n            return callback('Invalid options.abi provided');\n\n\n        const payable = abi.some(func => {\n            return func.type == 'constructor' && func.payable;\n        });\n\n        if(!utils.isHex(bytecode))\n            return callback('Invalid options.bytecode provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid options.feeLimit provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid options.callValue provided');\n\n        if(payable && callValue == 0)\n            return callback('When contract is payable, options.callValue must be a positive integer');\n\n        if(!payable && callValue > 0)\n            return callback('When contract is not payable, options.callValue must be 0');\n\n        if(!utils.isInteger(userFeePercentage) || userFeePercentage < 0 || userFeePercentage > 100)\n            return callback('Invalid options.userFeePercentage provided');\n\n        if(!utils.isInteger(originEnergyLimit) || originEnergyLimit < 0 || originEnergyLimit > 10_000_000)\n            return callback('Invalid options.originEnergyLimit provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        var constructorParams = abi.find(\n            (it) => {\n                return it.type === 'constructor';\n            }\n        );\n\n        if(utils.isNotNullOrUndefined(tokenValue) && (!utils.isInteger(tokenValue) || tokenValue < 0))\n            return callback('Invalid options.tokenValue provided');\n\n        if(utils.isNotNullOrUndefined(tokenId) && (!utils.isInteger(tokenId) || tokenId < 0))\n            return callback('Invalid options.tokenValue provided');\n\n        if(typeof constructorParams !== 'undefined' && constructorParams) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            const types = [];\n            const values = [];\n            constructorParams = constructorParams.inputs;\n\n            if(parameters.length != constructorParams.length)\n                return callback(`constructor needs ${constructorParams.length} but ${parameters.length} provided`);\n\n            for(let i = 0; i < parameters.length; i++) {\n                let type = constructorParams[i].type;\n                let value = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n\n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        const args = {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            consume_user_resource_percent: userFeePercentage,\n            origin_energy_limit: originEnergyLimit,\n            abi: JSON.stringify(abi),\n            bytecode,\n            parameter: parameters,\n            name\n        }\n\n        // tokenValue and tokenId can cause errors if provided when the trx10 proposal has not been approved yet. So we set them only if they are passed to the method.\n        if(utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if(utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n\n        this.tronWeb.fullNode.request('wallet/deploycontract', args, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    triggerSmartContract(...params) {\n        if (typeof params[2] !== 'object') {\n            params[2] = {\n                feeLimit: params[2],\n                callValue: params[3]\n            }\n            params.splice(3,1)\n        }\n        return this._triggerSmartContract(...params);\n    }\n\n    _triggerSmartContract(\n        contractAddress,\n        functionSelector,\n        options = {},\n        parameters = [],\n        issuerAddress = this.tronWeb.defaultAddress.hex,\n        callback = false\n    ) {\n\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(utils.isFunction(parameters)) {\n            callback = parameters;\n            parameters = [];\n        }\n\n        if(!callback) {\n            return this.injectPromise(\n                this._triggerSmartContract,\n                contractAddress,\n                functionSelector,\n                options,\n                parameters,\n                issuerAddress\n            );\n        }\n\n        let {\n            tokenValue,\n            tokenId,\n            callValue,\n            feeLimit\n        } = Object.assign({\n            callValue: 0,\n            feeLimit: 1_000_000_000\n        }, options)\n\n        if(utils.isNotNullOrUndefined(tokenValue) && (!utils.isInteger(tokenValue) || tokenValue < 0))\n            return callback('Invalid options.tokenValue provided');\n\n        if(utils.isNotNullOrUndefined(tokenId) && (!utils.isInteger(tokenId) || tokenId < 0))\n            return callback('Invalid options.tokenValue provided');\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(!utils.isString(functionSelector) || !functionSelector.length)\n            return callback('Invalid function selector provided');\n\n        if(!utils.isInteger(callValue) || callValue < 0)\n            return callback('Invalid call value provided');\n\n        if(!utils.isInteger(feeLimit) || feeLimit <= 0 || feeLimit > 1_000_000_000)\n            return callback('Invalid fee limit provided');\n\n        if(!utils.isArray(parameters))\n            return callback('Invalid parameters provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        functionSelector = functionSelector.replace('/\\s*/g', '');\n\n        if(parameters.length) {\n            const abiCoder = new Ethers.utils.AbiCoder();\n            let types = [];\n            const values = [];\n\n            for(let i = 0; i < parameters.length; i++) {\n                let {type, value} = parameters[i];\n\n                if(!type || !utils.isString(type) || !type.length)\n                    return callback('Invalid parameter type provided: ' + type);\n\n                if(type == 'address')\n                    value = this.tronWeb.address.toHex(value).replace(/^(41)/, '0x');\n\n                types.push(type);\n                values.push(value);\n            }\n\n            try {\n                // workaround for unsupported trcToken type\n                types = types.map(type => {\n                    if (/trcToken/.test(type)) {\n                        type = type.replace(/trcToken/,'uint256')\n                    }\n                    return type\n                })\n\n                parameters = abiCoder.encode(types, values).replace(/^(0x)/, '');\n            } catch (ex) {\n                return callback(ex);\n            }\n        } else parameters = '';\n\n        const args = {\n            contract_address: this.tronWeb.address.toHex(contractAddress),\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            function_selector: functionSelector,\n            fee_limit: parseInt(feeLimit),\n            call_value: parseInt(callValue),\n            parameter: parameters\n        };\n\n        if(utils.isNotNullOrUndefined(tokenValue))\n            args.call_token_value = parseInt(tokenValue)\n        if(utils.isNotNullOrUndefined(tokenId))\n            args.token_id = parseInt(tokenId)\n\n        this.tronWeb.fullNode.request('wallet/triggersmartcontract', args, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n\n    createToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createToken, options, issuerAddress);\n\n        const {\n            name = false,\n            abbreviation = false,\n            description = false,\n            url = false,\n            totalSupply = 0,\n            trxRatio = 1, // How much TRX will `tokenRatio` cost?\n            tokenRatio = 1, // How many tokens will `trxRatio` afford?\n            saleStart = Date.now(),\n            saleEnd = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0, // Out of `totalFreeBandwidth`, the amount each token holder get\n            frozenAmount = 0,\n            frozenDuration = 0,\n            // for now there is no default for the following values\n            voteScore,\n            precision\n        } = options;\n\n        if(!utils.isString(name) || !name.length)\n            return callback('Invalid token name provided');\n\n        if(!utils.isString(abbreviation) || !abbreviation.length)\n            return callback('Invalid token abbreviation provided');\n\n        if(!utils.isInteger(totalSupply) || totalSupply <= 0)\n            return callback('Invalid supply amount provided');\n\n        if(!utils.isInteger(trxRatio) || trxRatio <= 0)\n            return callback('TRX ratio must be a positive integer');\n\n        if(!utils.isInteger(tokenRatio) || tokenRatio <= 0)\n            return callback('Token ratio must be a positive integer');\n\n        if(!utils.isInteger(saleStart) || saleStart < Date.now())\n            return callback('Invalid sale start timestamp provided');\n\n        if(!utils.isInteger(saleEnd) || saleEnd <= saleStart)\n            return callback('Invalid sale end timestamp provided');\n\n        if(!utils.isString(description) || !description.length)\n            return callback('Invalid token description provided');\n\n        if(!utils.isString(url) || !url.length || !utils.isValidURL(url))\n            return callback('Invalid token url provided');\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!utils.isInteger(frozenAmount) || frozenAmount < 0 || (!frozenDuration && frozenAmount))\n            return callback('Invalid frozen supply provided');\n\n        if(!utils.isInteger(frozenDuration) || frozenDuration < 0 || (frozenDuration && !frozenAmount))\n            return callback('Invalid frozen duration provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        if(utils.isNotNullOrUndefined(voteScore) && (!utils.isInteger(voteScore) || voteScore <= 0))\n            return callback('voteScore must be a positive integer greater than 0');\n\n        if(utils.isNotNullOrUndefined(precision) && (!utils.isInteger(precision) || precision <= 0 || precision > 6))\n            return callback('precision must be a positive integer > 0 and <= 6');\n\n        const data = {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            name: this.tronWeb.fromUtf8(name),\n            abbr: this.tronWeb.fromUtf8(abbreviation),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            total_supply: parseInt(totalSupply),\n            trx_num: parseInt(trxRatio),\n            num: parseInt(tokenRatio),\n            start_time: parseInt(saleStart),\n            end_time: parseInt(saleEnd),\n            free_asset_net_limit: parseInt(freeBandwidth),\n            public_free_asset_net_limit: parseInt(freeBandwidthLimit),\n            frozen_supply: {\n                frozen_amount: parseInt(frozenAmount),\n                frozen_days: parseInt(frozenDuration)\n            }\n        }\n        if (precision && !isNaN(parseInt(precision))) {\n            data.precision = parseInt(precision);\n        }\n        if (voteScore && !isNaN(parseInt(voteScore))) {\n            data.vote_score = parseInt(voteScore)\n        }\n\n        this.tronWeb.fullNode.request('wallet/createassetissue', data, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateAccount(accountName = false, address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback) {\n            return this.injectPromise(this.updateAccount, accountName, address);\n        }\n\n        if(!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        if(!this.tronWeb.isAddress(address)) {\n            return callback('Invalid origin address provided');\n        }\n\n        this.tronWeb.fullNode.request('wallet/updateaccount', {\n            account_name: this.tronWeb.fromUtf8(accountName),\n            owner_address: this.tronWeb.address.toHex(address),\n        }, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    updateToken(options = {}, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.updateToken, options, issuerAddress);\n\n        const {\n            description = false,\n            url = false,\n            freeBandwidth = 0, // The creator's \"donated\" bandwidth for use by token holders\n            freeBandwidthLimit = 0 // Out of `totalFreeBandwidth`, the amount each token holder get\n        } = options;\n\n        if(!utils.isString(description) || !description.length)\n            return callback('Invalid token description provided');\n\n        if(!utils.isString(url) || !url.length || !utils.isValidURL(url))\n            return callback('Invalid token url provided');\n\n        if(!utils.isInteger(freeBandwidth) || freeBandwidth < 0)\n            return callback('Invalid free bandwidth amount provided');\n\n        if(!utils.isInteger(freeBandwidthLimit) || freeBandwidthLimit < 0 || (freeBandwidth && !freeBandwidthLimit))\n            return callback('Invalid free bandwidth limit provided');\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuer address provided');\n\n        this.tronWeb.fullNode.request('wallet/updateasset', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            description: this.tronWeb.fromUtf8(description),\n            url: this.tronWeb.fromUtf8(url),\n            new_limit: parseInt(freeBandwidth),\n            new_public_limit: parseInt(freeBandwidthLimit)\n        }, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    purchaseAsset(...args) {\n        return this.purchaseToken(...args);\n    }\n\n    createAsset(...args) {\n        return this.createToken(...args);\n    }\n\n    updateAsset(...args) {\n        return this.updateToken(...args);\n    }\n\n    /**\n     * Creates a proposal to modify the network.\n     * Can only be created by a current Super Representative.\n     */\n    createProposal(parameters = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createProposal, parameters, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        const invalid = 'Invalid proposal parameters provided';\n\n        if(!parameters)\n            return callback(invalid);\n\n        if(!utils.isArray(parameters))\n            parameters = [parameters];\n\n        for(let parameter of parameters) {\n            if(!utils.isObject(parameter))\n                return callback(invalid);\n        }\n\n        this.tronWeb.fullNode.request('wallet/proposalcreate', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            parameters: parameters\n        }, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Deletes a network modification proposal that the owner issued.\n     * Only current Super Representative can vote on a proposal.\n     */\n    deleteProposal(proposalID = false, issuerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(issuerAddress)) {\n            callback = issuerAddress;\n            issuerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.deleteProposal, proposalID, issuerAddress);\n\n        if(!this.tronWeb.isAddress(issuerAddress))\n            return callback('Invalid issuerAddress provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/proposaldelete', {\n            owner_address: this.tronWeb.address.toHex(issuerAddress),\n            proposal_id: parseInt(proposalID)\n        }, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Adds a vote to an issued network modification proposal.\n     * Only current Super Representative can vote on a proposal.\n     */\n    voteProposal(proposalID = false, isApproval = false, voterAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(voterAddress)) {\n            callback = voterAddress;\n            voterAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.voteProposal, proposalID, isApproval, voterAddress);\n\n        if(!this.tronWeb.isAddress(voterAddress))\n            return callback('Invalid voterAddress address provided');\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        if(!utils.isBoolean(isApproval))\n            return callback('Invalid hasApproval provided');\n\n        this.tronWeb.fullNode.request('wallet/proposalapprove', {\n            owner_address: this.tronWeb.address.toHex(voterAddress),\n            proposal_id: parseInt(proposalID),\n            is_add_approval: isApproval\n        }, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and TRX.\n     * Token Name should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTRXExchange(tokenName, tokenBalance, trxBalance, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createTRXExchange, tokenName, tokenBalance, trxBalance, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenBalance) || tokenBalance <= 0\n            || !utils.isInteger(trxBalance) || trxBalance <= 0)\n            return callback('Invalid amount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            first_token_id: this.tronWeb.fromUtf8(tokenName),\n            first_token_balance: tokenBalance,\n            second_token_id: '5f', // Constant for TRX.\n            second_token_balance: trxBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Create an exchange between a token and another token.\n     * DO NOT USE THIS FOR TRX.\n     * Token Names should be a CASE SENSITIVE string.\n     * PLEASE VERIFY THIS ON TRONSCAN.\n     */\n    createTokenExchange(firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.createTRXExchange, firstTokenName, firstTokenBalance, secondTokenName, secondTokenBalance, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid address provided');\n\n        if(!utils.isString(firstTokenName) || !firstTokenName.length)\n            return callback('Invalid firstTokenName provided');\n\n        if(!utils.isString(secondTokenName) || !secondTokenName.length)\n            return callback('Invalid secondTokenName provided');\n\n        if(!utils.isInteger(firstTokenBalance) || firstTokenBalance <= 0\n            || !utils.isInteger(secondTokenBalance) || secondTokenBalance <= 0)\n            return callback('Invalid amount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangecreate', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            first_token_id: this.tronWeb.fromUtf8(firstTokenName),\n            first_token_balance: firstTokenBalance,\n            second_token_id: this.tronWeb.fromUtf8(secondTokenName),\n            second_token_balance: secondTokenBalance\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Adds tokens into a bancor style exchange.\n     * Will add both tokens at market rate.\n     * Use \"_\" for the constant value for TRX.\n     */\n    injectExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.injectExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangeinject', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        }, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Withdraws tokens from a bancor style exchange.\n     * Will withdraw at market rate both tokens.\n     * Use \"_\" for the constant value for TRX.\n     */\n    withdrawExchangeTokens(exchangeID = false, tokenName = false, tokenAmount = 0, ownerAddress = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.withdrawExchangeTokens, exchangeID, tokenName, tokenAmount, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmount) || tokenAmount < 1)\n            return callback('Invalid tokenAmount provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangewithdraw', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromUtf8(tokenName),\n            quant: parseInt(tokenAmount)\n        }, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Trade tokens on a bancor style exchange.\n     * Expected value is a validation and used to cap the total amt of token 2 spent.\n     * Use \"_\" for the constant value for TRX.\n     */\n    tradeExchangeTokens(exchangeID = false,\n                        tokenName = false,\n                        tokenAmountSold = 0,\n                        tokenAmountExpected = 0,\n                        ownerAddress = this.tronWeb.defaultAddress.hex,\n                        callback = false) {\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.tradeExchangeTokens, exchangeID, tokenName, tokenAmountSold, tokenAmountExpected, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        if(!utils.isString(tokenName) || !tokenName.length)\n            return callback('Invalid tokenName provided');\n\n        if(!utils.isInteger(tokenAmountSold) || tokenAmountSold < 1)\n            return callback('Invalid tokenAmountSold provided');\n\n        if(!utils.isInteger(tokenAmountExpected) || tokenAmountExpected < 1)\n            return callback('Invalid tokenAmountExpected provided');\n\n        this.tronWeb.fullNode.request('wallet/exchangetransaction', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            exchange_id: parseInt(exchangeID),\n            token_id: this.tronWeb.fromAscii(tokenName),\n            quant: parseInt(tokenAmountSold),\n            expected: parseInt(tokenAmountExpected)\n        }, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update userFeePercentage.\n     */\n    updateSetting(contractAddress = false,\n                  userFeePercentage = false,\n                  ownerAddress = this.tronWeb.defaultAddress.hex,\n                  callback = false) {\n\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.updateSetting, contractAddress, userFeePercentage, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contractAddress provided');\n\n        if(!utils.isInteger(userFeePercentage) || userFeePercentage < 0 || userFeePercentage > 100)\n            return callback('Invalid options.userFeePercentage provided');\n\n        this.tronWeb.fullNode.request('wallet/updatesetting', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            contract_address: this.tronWeb.address.toHex(contractAddress),\n            consume_user_resource_percent: userFeePercentage\n        }, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n\n    /**\n     * Update energy limit.\n     */\n    updateEnergyLimit(contractAddress = false,\n                      originEnergyLimit = false,\n                      ownerAddress = this.tronWeb.defaultAddress.hex,\n                      callback = false) {\n\n        if(utils.isFunction(ownerAddress)) {\n            callback = ownerAddress;\n            ownerAddress = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.updateEnergyLimit, contractAddress, originEnergyLimit, ownerAddress);\n\n        if(!this.tronWeb.isAddress(ownerAddress))\n            return callback('Invalid ownerAddress provided');\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contractAddress provided');\n\n        if(!utils.isInteger(originEnergyLimit) || originEnergyLimit < 0 || originEnergyLimit > 10_000_000)\n            return callback('Invalid options.originEnergyLimit provided');\n\n        this.tronWeb.fullNode.request('wallet/updateenergylimit', {\n            owner_address: this.tronWeb.address.toHex(ownerAddress),\n            contract_address: this.tronWeb.address.toHex(contractAddress),\n            origin_energy_limit: originEnergyLimit\n        }, 'post').then(transaction => this._resultManager(transaction, callback)).catch(err => callback(err));\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport * as Ethers from 'ethers';\n\nconst TRX_MESSAGE_HEADER = '\\x19TRON Signed Message:\\n32';\nconst ETH_MESSAGE_HEADER = '\\x19Ethereum Signed Message:\\n32';\n\nexport default class Trx {\n    constructor(tronWeb = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    parseToken(token) {\n        return {\n            ...token,\n            name: this.tronWeb.toUtf8(token.name),\n            abbr: token.abbr && this.tronWeb.toUtf8(token.abbr),\n            description: token.description && this.tronWeb.toUtf8(token.description),\n            url: token.url && this.tronWeb.toUtf8(token.url)\n        };\n    }\n\n    getCurrentBlock(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getCurrentBlock);\n\n        this.tronWeb.fullNode.request('wallet/getnowblock').then(block => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlock(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlock, block);\n\n        if(block === false)\n            return callback('No block identifier provided');\n\n        if(block == 'earliest')\n            block = 0;\n\n        if(block == 'latest')\n            return this.getCurrentBlock(callback);\n\n        if(isNaN(block) && utils.isHex(block))\n            return this.getBlockByHash(block, callback);\n\n        this.getBlockByNumber(block, callback);\n    }\n\n    getBlockByHash(blockHash, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByHash, blockHash);\n\n        this.tronWeb.fullNode.request('wallet/getblockbyid', {\n            value: blockHash\n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockByNumber(blockID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getBlockByNumber, blockID);\n\n        if(!utils.isInteger(blockID) || blockID < 0)\n            return callback('Invalid block number provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbynum', {\n            num: parseInt(blockID)\n        }, 'post').then(block => {\n            if(!Object.keys(block).length)\n                return callback('Block not found');\n\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    getBlockTransactionCount(block = this.tronWeb.defaultBlock, callback = false) {\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockTransactionCount, block);\n\n        this.getBlock(block).then(({transactions = []}) => {\n            callback(null, transactions.length);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionFromBlock(block = this.tronWeb.defaultBlock, index = 0, callback = false) {\n        if(utils.isFunction(index)) {\n            callback = index;\n            index = 0;\n        }\n\n        if(utils.isFunction(block)) {\n            callback = block;\n            block = this.tronWeb.defaultBlock;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionFromBlock, block, index);\n\n        if(!utils.isInteger(index) || index < 0)\n            return callback('Invalid transaction index provided');\n\n        this.getBlock(block).then(({transactions = false}) => {\n            if(!transactions || transactions.length < index)\n                return callback('Transaction not found in block');\n\n            callback(null, transactions[index]);\n        }).catch(err => callback(err));\n    }\n\n    getTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransaction, transactionID);\n\n        this.tronWeb.fullNode.request('wallet/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getConfirmedTransaction(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getConfirmedTransaction, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactionbyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            if(!Object.keys(transaction).length)\n                return callback('Transaction not found');\n\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionInfo(transactionID, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTransactionInfo, transactionID);\n\n        this.tronWeb.solidityNode.request('walletsolidity/gettransactioninfobyid', {\n            value: transactionID\n        }, 'post').then(transaction => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getTransactionsToAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsToAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'to', limit, offset, callback);\n    }\n\n    getTransactionsFromAddress(address = this.tronWeb.defaultAddress.hex, limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsFromAddress, address, limit, offset);\n\n        address = this.tronWeb.address.toHex(address);\n\n        return this.getTransactionsRelated(address, 'from', limit, offset, callback);\n    }\n\n    async getTransactionsRelated(address = this.tronWeb.defaultAddress.hex, direction = 'all', limit = 30, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n\n        if(utils.isFunction(direction)) {\n            callback = direction;\n            direction = 'all';\n        }\n\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTransactionsRelated, address, direction, limit, offset);\n\n        if(!['to', 'from', 'all'].includes(direction))\n            return callback('Invalid direction provided: Expected \"to\", \"from\" or \"all\"');\n\n        if(direction == 'all') {\n            try {\n                const [from, to] = await Promise.all([\n                    this.getTransactionsRelated(address, 'from', limit, offset),\n                    this.getTransactionsRelated(address, 'to', limit, offset)\n                ])\n\n                return callback(null, [\n                    ...from.map(tx => (tx.direction = 'from', tx)),\n                    ...to.map(tx => (tx.direction = 'to', tx))\n                ].sort((a, b) => {\n                    return b.raw_data.timestamp - a.raw_data.timestamp\n                }));\n            } catch (ex) {\n                return callback(ex);\n            }\n        }\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request(`walletextension/gettransactions${direction}this`, {\n            account: {\n                address\n            },\n            offset,\n            limit\n        }, 'post').then(({transaction}) => {\n            callback(null, transaction);\n        }).catch(err => callback(err));\n    }\n\n    getAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.solidityNode.request('walletsolidity/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBalance, address);\n\n        this.getAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedAccount(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getUnconfirmedAccount, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccount', {\n            address\n        }, 'post').then(account => {\n            callback(null, account);\n        }).catch(err => callback(err));\n    }\n\n    getUnconfirmedBalance(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getUnconfirmedBalance, address);\n\n        this.getUnconfirmedAccount(address).then(({balance = 0}) => {\n            callback(null, balance);\n        }).catch(err => callback(err));\n    }\n\n    getBandwidth(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBandwidth, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getaccountnet', {\n            address\n        }, 'post').then(({freeNetUsed = 0, freeNetLimit = 0, NetUsed = 0, NetLimit = 0}) => {\n            callback(null, (freeNetLimit - freeNetUsed) + (NetLimit - NetUsed));\n        }).catch(err => callback(err));\n    }\n\n    getTokensIssuedByAddress(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.hex;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getTokensIssuedByAddress, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        address = this.tronWeb.address.toHex(address);\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyaccount', {\n            address\n        }, 'post').then(({assetIssue = false}) => {\n            if(!assetIssue)\n                return callback(null, {});\n\n            const tokens = assetIssue.map(token => {\n                return this.parseToken(token);\n            }).reduce((tokens, token) => {\n                return tokens[token.name] = token, tokens;\n            }, {});\n\n            callback(null, tokens);\n        }).catch(err => callback(err));\n    }\n\n    getTokenFromID(tokenID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTokenFromID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if(!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this.parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    listNodes(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listNodes);\n\n        this.tronWeb.fullNode.request('wallet/listnodes').then(({nodes = []}) => {\n            callback(null, nodes.map(({address: {host, port}}) => (\n                `${this.tronWeb.toUtf8(host)}:${port}`\n            )));\n        }).catch(err => callback(err));\n    }\n\n    getBlockRange(start = 0, end = 30, callback = false) {\n        if(utils.isFunction(end)) {\n            callback = end;\n            end = 30;\n        }\n\n        if(utils.isFunction(start)) {\n            callback = start;\n            start = 0;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.getBlockRange, start, end);\n\n        if(!utils.isInteger(start) || start < 0)\n            return callback('Invalid start of range provided');\n\n        if(!utils.isInteger(end) || end <= start)\n            return callback('Invalid end of range provided');\n\n        this.tronWeb.fullNode.request('wallet/getblockbylimitnext', {\n            startNum: parseInt(start),\n            endNum: parseInt(end) + 1\n        }, 'post').then(({block = []}) => {\n            callback(null, block);\n        }).catch(err => callback(err));\n    }\n\n    listSuperRepresentatives(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listSuperRepresentatives);\n\n        this.tronWeb.fullNode.request('wallet/listwitnesses').then(({witnesses = []}) => {\n            callback(null, witnesses);\n        }).catch(err => callback(err));\n    }\n\n    listTokens(limit = 0, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 0;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.listTokens, limit, offset);\n\n        if(!utils.isInteger(limit) || limit < 0 || (offset && limit < 1))\n            return callback('Invalid limit provided');\n\n        if(!utils.isInteger(offset) || offset < 0)\n            return callback('Invalid offset provided');\n\n        if(!limit) {\n            return this.tronWeb.fullNode.request('wallet/getassetissuelist').then(({assetIssue = []}) => {\n                callback(null, assetIssue.map(token => this.parseToken(token)));\n            }).catch(err => callback(err));\n        }\n\n        this.tronWeb.fullNode.request('wallet/getpaginatedassetissuelist', {\n            offset: parseInt(offset),\n            limit: parseInt(limit)\n        }, 'post').then(({assetIssue = []}) => {\n            callback(null, assetIssue.map(token => this.parseToken(token)));\n        }).catch(err => callback(err));\n    }\n\n    timeUntilNextVoteCycle(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.timeUntilNextVoteCycle);\n\n        this.tronWeb.fullNode.request('wallet/getnextmaintenancetime').then(({num = -1}) => {\n            if(num == -1)\n                return callback('Failed to get time until next vote cycle');\n\n            callback(null, Math.floor(num / 1000));\n        }).catch(err => callback(err));\n    }\n\n    getContract(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getContract, contractAddress);\n\n        if(!this.tronWeb.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        contractAddress = this.tronWeb.address.toHex(contractAddress);\n\n        this.tronWeb.fullNode.request('wallet/getcontract', {\n            value: contractAddress\n        }).then(contract => {\n            if(contract.Error)\n                return callback('Contract does not exist');\n\n            callback(null, contract);\n        }).catch(err => callback(err));\n    }\n\n    async verifyMessage(message = false, signature = false, address = this.tronWeb.defaultAddress.base58, useTronHeader = true, callback = false) {\n        if(utils.isFunction(address)) {\n            callback = address;\n            address = this.tronWeb.defaultAddress.base58;\n            useTronHeader = true;\n        }\n\n        if(utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.verifyMessage, message, signature, address, useTronHeader);\n\n        if(!utils.isHex(message))\n            return callback('Expected hex message input');\n\n        if(message.substr(0, 2) == '0x')\n            message = message.substring(2);\n\n        if(signature.substr(0, 2) == '0x')\n            signature = signature.substr(2);\n\n        const messageBytes = [\n            ...Ethers.utils.toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n            ...utils.code.hexStr2byteArray(message)\n        ];\n\n        const messageDigest = Ethers.utils.keccak256(messageBytes);\n        const recovered = Ethers.utils.recoverAddress(messageDigest, {\n            recoveryParam: signature.substring(128, 130) == '1c' ? 1 : 0,\n            r: '0x' + signature.substring(0, 64),\n            s: '0x' + signature.substring(64, 128)\n        });\n\n        const tronAddress = '41' + recovered.substr(2);\n        const base58Address = this.tronWeb.address.fromHex(tronAddress);\n\n        if(base58Address == this.tronWeb.address.fromHex(address))\n            return callback(null, true);\n\n        callback('Signature does not match');\n    }\n\n    async sign(transaction = false, privateKey = this.tronWeb.defaultPrivateKey, useTronHeader = true, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n            useTronHeader = true;\n        }\n\n        if(utils.isFunction(useTronHeader)) {\n            callback = useTronHeader;\n            useTronHeader = true;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sign, transaction, privateKey, useTronHeader);\n\n        // Message signing\n        if(utils.isString(transaction)) {\n            if(transaction.substring(0, 2) == '0x')\n                transaction = transaction.substring(2);\n\n            if(!utils.isHex(transaction))\n                return callback('Expected hex message input');\n\n            try {\n                const signingKey = new Ethers.utils.SigningKey(privateKey);\n                const messageBytes = [\n                    ...Ethers.utils.toUtf8Bytes(useTronHeader ? TRX_MESSAGE_HEADER : ETH_MESSAGE_HEADER),\n                    ...utils.code.hexStr2byteArray(transaction)\n                ];\n\n                const messageDigest = Ethers.utils.keccak256(messageBytes);\n                const signature = signingKey.signDigest(messageDigest);\n\n                const signatureHex = [\n                    '0x',\n                    signature.r.substring(2),\n                    signature.s.substring(2),\n                    Number(signature.v).toString(16)\n                ].join('');\n\n                return callback(null, signatureHex);\n            } catch (ex) {\n                callback(ex);\n            }\n        }\n\n        if(!utils.isObject(transaction))\n            return callback('Invalid transaction provided');\n\n        if(transaction.signature)\n            return callback('Transaction is already signed');\n\n        try {\n            const address = this.tronWeb.address.toHex(\n                this.tronWeb.address.fromPrivateKey(privateKey)\n            ).toLowerCase();\n\n            if(address !== transaction.raw_data.contract[0].parameter.value.owner_address.toLowerCase())\n                return callback('Private key does not match address in transaction');\n\n            return callback(null,\n                utils.crypto.signTransaction(privateKey, transaction)\n            );\n        } catch (ex) {\n            callback(ex);\n        }\n    }\n\n    sendRawTransaction(signedTransaction = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this.sendRawTransaction, signedTransaction, options);\n\n        if(!utils.isObject(signedTransaction))\n            return callback('Invalid transaction provided');\n\n        if(!utils.isObject(options))\n            return callback('Invalid options provided');\n\n        if(!signedTransaction.signature || !utils.isArray(signedTransaction.signature))\n            return callback('Transaction is not signed');\n\n        this.tronWeb.fullNode.request(\n            'wallet/broadcasttransaction',\n            signedTransaction,\n            'post'\n        ).then(result => {\n            if(result.result)\n                result.transaction = signedTransaction;\n            callback(null, result);\n        }).catch(err => callback(err));\n    }\n\n    async sendTransaction(to = false, amount = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(typeof options === 'string')\n            options = {privateKey: options};\n\n        if(!callback)\n            return this.injectPromise(this.sendTransaction, to, amount, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendTrx(to, amount, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async sendToken(to = false, amount = false, tokenID = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(typeof options === 'string')\n            options = {privateKey: options};\n\n        if(!callback)\n            return this.injectPromise(this.sendToken, to, amount, tokenID, options);\n\n        if(!this.tronWeb.isAddress(to))\n            return callback('Invalid recipient provided');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if(!utils.isString(tokenID))\n            return callback('Invalid token ID provided');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const transaction = await this.tronWeb.transactionBuilder.sendToken(to, amount, tokenID, address);\n            const signedTransaction = await this.sign(transaction, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Freezes an amount of TRX.\n     * Will give bandwidth OR Energy and TRON Power(voting rights)\n     * to the owner of the frozen tokens.\n     *\n     * @param amount - is the number of frozen trx\n     * @param duration - is the duration in days to be frozen\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async freezeBalance(amount = 0, duration = 3, resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if(utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n        if(utils.isFunction(duration)) {\n            callback = duration;\n            duration = 3;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = \"BANDWIDTH\";\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(typeof options === 'string')\n            options = {privateKey: options};\n\n        if(!callback)\n            return this.injectPromise(this.freezeBalance, amount, duration, resource, options, receiverAddress);\n\n        if(!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        if(!utils.isInteger(amount) || amount <= 0)\n            return callback('Invalid amount provided');\n\n        if(!utils.isInteger(duration) || duration < 3)\n            return callback('Invalid duration provided, minimum of 3 days');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const freezeBalance = await this.tronWeb.transactionBuilder.freezeBalance(amount, duration, resource, address, receiverAddress);\n            const signedTransaction = await this.sign(freezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Unfreeze TRX that has passed the minimum freeze duration.\n     * Unfreezing will remove bandwidth and TRON Power.\n     *\n     * @param resource - is the type, must be either \"ENERGY\" or \"BANDWIDTH\"\n     * @param options\n     * @param callback\n     */\n    async unfreezeBalance(resource = \"BANDWIDTH\", options = {}, receiverAddress = undefined, callback = false) {\n        if(utils.isFunction(receiverAddress)) {\n            callback = receiverAddress;\n            receiverAddress = undefined;\n        }\n\n        if(utils.isFunction(resource)) {\n            callback = resource;\n            resource = 'BANDWIDTH';\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(typeof options === 'string')\n            options = {privateKey: options};\n\n        if(!callback)\n            return this.injectPromise(this.unfreezeBalance, resource, options, receiverAddress);\n\n        if(!['BANDWIDTH', 'ENERGY'].includes(resource))\n            return callback('Invalid resource provided: Expected \"BANDWIDTH\" or \"ENERGY\"');\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const unfreezeBalance = await this.tronWeb.transactionBuilder.unfreezeBalance(resource, address, receiverAddress);\n            const signedTransaction = await this.sign(unfreezeBalance, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    /**\n     * Modify account name\n     * Note: Username is allowed to edit only once.\n     *\n     * @param privateKey - Account private Key\n     * @param accountName - name of the account\n     * @param callback\n     *\n     * @return modified Transaction Object\n     */\n    async updateAccount(accountName = false, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(typeof options === 'string')\n            options = {privateKey: options};\n\n        if(!callback) {\n            return this.injectPromise(this.updateAccount, accountName, options);\n        }\n\n        if(!utils.isString(accountName) || !accountName.length) {\n            return callback('Name must be a string');\n        }\n\n        options = {\n            privateKey: this.tronWeb.defaultPrivateKey,\n            address: this.tronWeb.defaultAddress.hex,\n            ...options\n        };\n\n        if(!options.privateKey && !options.address)\n            return callback('Function requires either a private key or address to be set');\n\n        try {\n            const address = options.privateKey ? this.tronWeb.address.fromPrivateKey(options.privateKey) : options.address;\n            const updateAccount = await this.tronWeb.transactionBuilder.updateAccount(accountName, address);\n            const signedTransaction = await this.sign(updateAccount, options.privateKey || undefined);\n            const result = await this.sendRawTransaction(signedTransaction);\n\n            return callback(null, result);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    signMessage(...args) {\n        return this.sign(...args);\n    }\n\n    sendAsset(...args) {\n        return this.sendToken(...args);\n    }\n\n    send(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    sendTrx(...args) {\n        return this.sendTransaction(...args);\n    }\n\n    broadcast(...args) {\n        return this.sendRawTransaction(...args);\n    }\n\n    signTransaction(...args) {\n        return this.sign(...args);\n    }\n\n    /**\n     * Gets a network modification proposal by ID.\n     */\n    getProposal(proposalID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getProposal, proposalID);\n\n        if(!utils.isInteger(proposalID) || proposalID < 0)\n            return callback('Invalid proposalID provided');\n\n        this.tronWeb.fullNode.request('wallet/getproposalbyid', {\n            id: parseInt(proposalID),\n        }, 'post').then(proposal => {\n            callback(null, proposal);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listProposals(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listProposals);\n\n        this.tronWeb.fullNode.request('wallet/listproposals', {}, 'post').then(({proposals = []}) => {\n            callback(null, proposals);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists all parameters available for network modification proposals.\n     */\n    getChainParameters(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getChainParameters);\n\n        this.tronWeb.fullNode.request('wallet/getchainparameters', {}, 'post').then(({chainParameter = []}) => {\n            callback(null, chainParameter);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the account resources\n     */\n    getAccountResources(address = this.tronWeb.defaultAddress.hex, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getAccountResources, address);\n\n        if(!this.tronWeb.isAddress(address))\n            return callback('Invalid address provided');\n\n        this.tronWeb.fullNode.request('wallet/getaccountresource', {\n            address: this.tronWeb.address.toHex(address),\n        }, 'post').then(resources => {\n            callback(null, resources);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get the exchange ID.\n     */\n    getExchangeByID(exchangeID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getExchangeByID, exchangeID);\n\n        if(!utils.isInteger(exchangeID) || exchangeID < 0)\n            return callback('Invalid exchangeID provided');\n\n        this.tronWeb.fullNode.request('wallet/getexchangebyid', {\n            id: exchangeID,\n        }, 'post').then(exchange => {\n            callback(null, exchange);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Lists the exchanges\n     */\n    listExchanges(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchanges', {}, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }, 'post').catch(err => callback(err));\n    }\n\n    /**\n     * Lists all network modification proposals.\n     */\n    listExchangesPaginated(limit = 10, offset = 0, callback = false) {\n        if(utils.isFunction(offset)) {\n            callback = offset;\n            offset = 0;\n        }\n        if(utils.isFunction(limit)) {\n            callback = limit;\n            limit = 30;\n        }\n        if(!callback)\n            return this.injectPromise(this.listExchanges);\n\n        this.tronWeb.fullNode.request('wallet/listexchangespaginated', {\n            limit,\n            offset\n        }, 'post').then(({exchanges = []}) => {\n            callback(null, exchanges);\n        }).catch(err => callback(err));\n    }\n\n    /**\n     * Get info about thre node\n     */\n    getNodeInfo(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getNodeInfo);\n\n        this.tronWeb.fullNode.request('wallet/getnodeinfo', {}, 'post').then(info => {\n            callback(null, info);\n        }, 'post').catch(err => callback(err));\n    }\n\n\n    getTokenListByName(tokenID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTokenListByName, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuelistbyname', {\n            value: this.tronWeb.fromUtf8(tokenID)\n        }, 'post').then(token => {\n            if(!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this.parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n    getTokenByID(tokenID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getTokenByID, tokenID);\n\n        if (utils.isInteger(tokenID))\n            tokenID = tokenID.toString()\n\n        if(!utils.isString(tokenID) || !tokenID.length)\n            return callback('Invalid token ID provided');\n\n        this.tronWeb.fullNode.request('wallet/getassetissuebyid', {\n            value: tokenID\n        }, 'post').then(token => {\n            if(!token.name)\n                return callback('Token does not exist');\n\n            callback(null, this.parseToken(token));\n        }).catch(err => callback(err));\n    }\n\n};\n","import utils from 'utils';\n\nconst getFunctionSelector = abi => {\n    return abi.name + '(' + getParamTypes(abi.inputs || []).join(',') + ')';\n}\n\nconst getParamTypes = params => {\n    return params.map(({type}) => type);\n}\n\nconst decodeOutput = (abi, output) => {\n    const names = abi.map(({name}) => name).filter(name => !!name);\n    const types = abi.map(({type}) => type);\n\n    return utils.abi.decodeParams(names, types, output);\n};\n\nexport default class Method {\n    constructor(contract, abi) {\n        this.tronWeb = contract.tronWeb;\n        this.contract = contract;\n\n        this.abi = abi;\n        this.name = abi.name || (abi.name = abi.type);\n\n        this.inputs = abi.inputs || [];\n        this.outputs = abi.outputs || [];\n\n        this.functionSelector = getFunctionSelector(abi);\n        this.signature = this.tronWeb.sha3(this.functionSelector, false).slice(0, 8);\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.defaultOptions = {\n            feeLimit: 1000000000,\n            callValue: 0,\n            userFeePercentage: 100,\n            from: this.tronWeb.defaultAddress.hex, // Only used for send()\n            shouldPollResponse: false // Only used for sign()\n        };\n    }\n\n    decodeInput(data) {\n        return decodeOutput(this.inputs, '0x' + data);\n    }\n\n    onMethod(...args) {\n        const types = getParamTypes(this.inputs);\n\n        args.forEach((arg, index) => {\n            if(types[index] == 'address')\n                args[index] = this.tronWeb.address.toHex(arg).replace(/^(41)/, '0x')\n\n            if(types[index] == 'address[]') {\n                args[index] = args[index].map(address => {\n                    return this.tronWeb.address.toHex(address).replace(/^(41)/, '0x')\n                })\n            }\n        });\n\n        return {\n            call: (...methodArgs) => this._call(types, args, ...methodArgs),\n            send: (...methodArgs) => this._send(types, args, ...methodArgs),\n            watch: (...methodArgs) => this._watch(...methodArgs)\n        }\n    }\n\n    async _call(types, args, options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this._call, types, args, options);\n\n        if(types.length !== args.length)\n            return callback('Invalid argument count provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if(!['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use send()`);\n\n        options = {...this.defaultOptions, ...options};\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        this.tronWeb.transactionBuilder.triggerSmartContract(\n            this.contract.address,\n            this.functionSelector,\n            options,\n            parameters,\n            this.tronWeb.address.toHex(options.from),\n            (err, transaction) => {\n                if(err)\n                    return callback(err);\n\n                if(!utils.hasProperty(transaction, 'constant_result'))\n                    return callback('Failed to execute');\n\n                try {\n\n                    const len = transaction.constant_result[0].length\n                    if(len === 0 || len % 64 === 8) {\n                        let msg = 'The call has been reverted or has thrown an error.'\n                        if(len !== 0) {\n                            msg += ' Error message: '\n                            let msg2 = ''\n                            let chunk = transaction.constant_result[0].substring(8)\n                            for(let i = 0; i < len - 8; i += 64) {\n                                msg2 += this.tronWeb.toUtf8(chunk.substring(i, i + 64))\n                            }\n                            msg += msg2.replace(/(\\u0000|\\u000b|\\f)+/g, ' ').replace(/ +/g, ' ').replace(/\\s+$/g, '');\n                        }\n                        return callback(msg)\n                    }\n\n                    let output = decodeOutput(this.outputs, '0x' + transaction.constant_result[0]);\n\n                    if(output.length === 1)\n                        output = output[0];\n\n                    return callback(null, output);\n                } catch (ex) {\n                    return callback(ex);\n                }\n            });\n    }\n\n    async _send(types, args, options = {}, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!callback)\n            return this.injectPromise(this._send, types, args, options, privateKey);\n\n        if(types.length !== args.length)\n            throw new Error('Invalid argument count provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(!this.contract.deployed)\n            return callback('Calling smart contracts requires you to load the contract first');\n\n        const {stateMutability} = this.abi;\n\n        if(['pure', 'view'].includes(stateMutability.toLowerCase()))\n            return callback(`Methods with state mutability \"${stateMutability}\" must use call()`);\n\n        // If a function isn't payable, dont provide a callValue.\n        if(!['payable'].includes(stateMutability.toLowerCase()))\n            options.callValue = 0;\n\n        options = {...this.defaultOptions, ...options};\n\n        const parameters = args.map((value, index) => ({\n            type: types[index],\n            value\n        }));\n\n        try {\n            const address = privateKey ? this.tronWeb.address.fromPrivateKey(privateKey) : this.tronWeb.defaultAddress.base58;\n            const transaction = await this.tronWeb.transactionBuilder.triggerSmartContract(\n                this.contract.address,\n                this.functionSelector,\n                options,\n                parameters,\n                this.tronWeb.address.toHex(address)\n            );\n\n            if(!transaction.result || !transaction.result.result)\n                return callback('Unknown error: ' + JSON.stringify(transaction, null, 2));\n\n            // If privateKey is false, this won't be signed here. We assume sign functionality will be replaced.\n            const signedTransaction = await this.tronWeb.trx.sign(transaction.transaction, privateKey);\n\n            if(!signedTransaction.signature) {\n                if(!privateKey)\n                    return callback('Transaction was not signed properly');\n\n                return callback('Invalid private key provided');\n            }\n\n            const broadcast = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(broadcast.code)\n                return callback({\n                    error: broadcast.code,\n                    message: this.tronWeb.toUtf8(broadcast.message)\n                })\n\n            if(!options.shouldPollResponse)\n                return callback(null, signedTransaction.txID);\n\n            const checkResult = async (index = 0) => {\n                if(index == 20) {\n                    return callback({\n                        error: 'Cannot find result in solidity node',\n                        transaction: signedTransaction\n                    });\n                }\n\n                const output = await this.tronWeb.trx.getTransactionInfo(signedTransaction.txID);\n\n                if(!Object.keys(output).length) {\n                    return setTimeout(() => {\n                        checkResult(index + 1);\n                    }, 3000);\n                }\n\n                if(output.result && output.result == 'FAILED') {\n                    return callback({\n                        error: this.tronWeb.toUtf8(output.resMessage),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                if(!utils.hasProperty(output, 'contractResult')) {\n                    return callback({\n                        error: 'Failed to execute: ' + JSON.stringify(output, null, 2),\n                        transaction: signedTransaction,\n                        output\n                    });\n                }\n\n                let decoded = decodeOutput(this.outputs, '0x' + output.contractResult[0]);\n\n                if(decoded.length === 1)\n                    decoded = decoded[0];\n\n                return callback(null, decoded);\n            }\n\n            checkResult();\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async _watch(options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!utils.isFunction(callback))\n            throw new Error('Expected callback to be provided');\n\n        if(!this.contract.address)\n            return callback('Smart contract is missing address');\n\n        if(this.abi.type.toLowerCase() !== 'event')\n            return callback('Invalid method type for event watching');\n\n        if(!this.tronWeb.eventServer)\n            return callback('No event server configured');\n\n        let listener = false;\n        let lastBlock = false;\n        const sinceTimestamp = new Date().getTime();\n\n        const getEvents = async () => {\n            try {\n                const events = await this.tronWeb.getEventResult(this.contract.address, sinceTimestamp, this.name);\n                const [latestEvent] = events.sort((a, b) => b.block - a.block);\n                const newEvents = events.filter((event, index) => {\n\n                    if(options.resourceNode && !RegExp(options.resourceNode, 'i').test(event.resourceNode))\n                        return false;\n\n                    const duplicate = events.slice(0, index).some(priorEvent => (\n                        JSON.stringify(priorEvent) == JSON.stringify(event)\n                    ));\n\n                    if(duplicate)\n                        return false;\n\n                    if(!lastBlock)\n                        return true;\n\n                    return event.block > lastBlock;\n                });\n\n                if(latestEvent)\n                    lastBlock = latestEvent.block;\n\n                return newEvents;\n            } catch (ex) {\n                return Promise.reject(ex);\n            }\n        };\n\n        const bindListener = () => {\n            if(listener)\n                clearInterval(listener);\n\n            listener = setInterval(() => {\n                getEvents().then(events => events.forEach(event => {\n                    callback(null, utils.parseEvent(event, this.abi))\n                })).catch(err => callback(err));\n            }, 3000);\n        };\n\n        await getEvents();\n        bindListener();\n\n        return {\n            start: bindListener(),\n            stop: () => {\n                if(!listener)\n                    return;\n\n                clearInterval(listener);\n                listener = false;\n            }\n        }\n    }\n}\n","import TronWeb from 'index';\nimport utils from 'utils';\nimport Method from './method';\n\nexport default class Contract {\n    constructor(tronWeb = false, abi = [], address = false) {\n        if(!tronWeb || !tronWeb instanceof TronWeb)\n            throw new Error('Expected instance of TronWeb');\n\n        this.tronWeb = tronWeb;\n        this.injectPromise = utils.promiseInjector(this);\n\n        this.address = address;\n        this.abi = abi;\n\n        this.eventListener = false;\n        this.bytecode = false;\n        this.deployed = false;\n        this.lastBlock = false;\n\n        this.methods = {};\n        this.methodInstances = {};\n        this.props = [];\n\n        if(this.tronWeb.isAddress(address))\n            this.deployed = true;\n        else this.address = false;\n\n        this.loadAbi(abi);\n    }\n\n    async _getEvents(options = {}) {\n        const events = await this.tronWeb.getEventResult(this.address);\n        const [latestEvent] = events.sort((a, b) => b.block - a.block);\n        const newEvents = events.filter((event, index) => {\n\n            if(options.resourceNode && !RegExp(options.resourceNode, 'i').test(event.resourceNode))\n                return false;\n\n            const duplicate = events.slice(0, index).some(priorEvent => (\n                JSON.stringify(priorEvent) == JSON.stringify(event)\n            ));\n\n            if(duplicate)\n                return false;\n\n            if(!this.lastBlock)\n                return true;\n\n            return event.block > this.lastBlock;\n        });\n\n        if(latestEvent)\n            this.lastBlock = latestEvent.block;\n\n        return newEvents;\n    }\n\n    async _startEventListener(options = {}, callback) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(this.eventListener)\n            clearInterval(this.eventListener);\n\n        if(!this.tronWeb.eventServer)\n            throw new Error('Event server is not configured');\n\n        if(!this.address)\n            throw new Error('Contract is not configured with an address');\n\n        this.eventCallback = callback;\n        await this._getEvents(options);\n\n        this.eventListener = setInterval(() => {\n            this._getEvents(options).then(newEvents => newEvents.forEach(event => {\n                this.eventCallback && this.eventCallback(event)\n            })).catch(err => {\n                console.error('Failed to get event list', err);\n            });\n        }, 3000);\n    }\n\n    _stopEventListener() {\n        if(!this.eventListener)\n            return;\n\n        clearInterval(this.eventListener);\n        this.eventListener = false;\n        this.eventCallback = false;\n    }\n\n    hasProperty(property) {\n        return this.hasOwnProperty(property) || this.__proto__.hasOwnProperty(property);\n    }\n\n    loadAbi(abi) {\n        this.abi = abi;\n        this.methods = {};\n\n        this.props.forEach(prop => delete this[prop]);\n\n        abi.forEach(func => {\n            // Don't build a method for constructor function. That's handled through contract create.\n            if(func.type.toLowerCase() === 'constructor')\n                return;\n\n            const method = new Method(this, func);\n            const methodCall = method.onMethod.bind(method);\n\n            const {\n                name,\n                functionSelector,\n                signature\n            } = method;\n\n            this.methods[name] = methodCall;\n            this.methods[functionSelector] = methodCall;\n            this.methods[signature] = methodCall;\n\n            this.methodInstances[name] = method;\n            this.methodInstances[functionSelector] = method;\n            this.methodInstances[signature] = method;\n\n            if(!this.hasProperty(name)) {\n                this[name] = methodCall;\n                this.props.push(name);\n            }\n\n            if(!this.hasProperty(functionSelector)) {\n                this[functionSelector] = methodCall;\n                this.props.push(functionSelector);\n            }\n\n            if(!this.hasProperty(signature)) {\n                this[signature] = methodCall;\n                this.props.push(signature);\n            }\n        });\n    }\n\n    decodeInput(data) {\n\n        const methodName = data.substring(0, 8);\n        const inputData = data.substring(8);\n\n        if(!this.methodInstances[methodName])\n            throw new Error('Contract method ' + methodName + \" not found\");\n\n        const methodInstance = this.methodInstances[methodName];\n\n        return {\n            name: methodInstance.name,\n            params: this.methodInstances[methodName].decodeInput(inputData),\n        }\n    }\n\n    async new(options, privateKey = this.tronWeb.defaultPrivateKey, callback = false) {\n        if(utils.isFunction(privateKey)) {\n            callback = privateKey;\n            privateKey = this.tronWeb.defaultPrivateKey;\n        }\n\n        if(!callback)\n            return this.injectPromise(this.new, options, privateKey);\n\n        try {\n            const address = this.tronWeb.address.fromPrivateKey(privateKey);\n            const transaction = await this.tronWeb.transactionBuilder.createSmartContract(options, address);\n            const signedTransaction = await this.tronWeb.trx.sign(transaction, privateKey);\n            const contract = await this.tronWeb.trx.sendRawTransaction(signedTransaction);\n\n            if(contract.code)\n                return callback({\n                    error: contract.code,\n                    message: this.tronWeb.toUtf8(contract.message)\n                })\n\n            return this.at(signedTransaction.contract_address, callback);\n        } catch (ex) {\n            return callback(ex);\n        }\n    }\n\n    async at(contractAddress, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.at, contractAddress);\n\n        try {\n            const contract = await this.tronWeb.trx.getContract(contractAddress);\n\n            if(!contract.contract_address)\n                callback('Unknown error: ' + JSON.stringify(contract, null, 2));\n\n            this.address = contract.contract_address;\n            this.bytecode = contract.bytecode;\n            this.deployed = true;\n\n            this.loadAbi(contract.abi.entrys);\n\n            callback(null, this);\n        } catch (ex) {\n            if(ex.toString().includes('does not exist'))\n                return callback('Contract has not been deployed on the network');\n\n            return callback(ex);\n        }\n    }\n\n    events(options = {}, callback = false) {\n        if(utils.isFunction(options)) {\n            callback = options;\n            options = {};\n        }\n\n        if(!utils.isFunction(callback))\n            throw new Error('Callback function expected');\n\n        const self = this;\n\n        return {\n            start(startCallback = false) {\n                if(!startCallback) {\n                    self._startEventListener(options, callback);\n                    return this;\n                }\n\n                self._startEventListener(options, callback).then(() => {\n                    startCallback();\n                }).catch(err => {\n                    startCallback(err)\n                });\n\n                return this;\n            },\n            stop() {\n                self._stopEventListener();\n            }\n        };\n    }\n}\n","import providers from 'lib/providers';\nimport utils from 'utils';\nimport BigNumber from 'bignumber.js';\nimport EventEmitter from 'eventemitter3';\nimport querystring from 'querystring';\n\nimport TransactionBuilder from 'lib/transactionBuilder';\nimport Trx from 'lib/trx';\nimport Contract from 'lib/contract';\n\nimport {keccak256} from 'js-sha3';\n\nexport default class TronWeb extends EventEmitter {\n    static providers = providers;\n    static BigNumber = BigNumber;\n    static TransactionBuilder = TransactionBuilder;\n    static Trx = Trx;\n    static Contract = Contract;\n\n    constructor(fullNode, solidityNode, eventServer = false, privateKey = false) {\n        super();\n\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        this.setFullNode(fullNode);\n        this.setSolidityNode(solidityNode);\n        this.setEventServer(eventServer);\n\n        this.providers = providers;\n        this.BigNumber = BigNumber;\n\n        this.defaultBlock = false;\n        this.defaultPrivateKey = false;\n        this.defaultAddress = {\n            hex: false,\n            base58: false\n        };\n\n        [\n            'sha3', 'toHex', 'toUtf8', 'fromUtf8',\n            'toAscii', 'fromAscii', 'toDecimal', 'fromDecimal',\n            'toSun', 'fromSun', 'toBigNumber', 'isAddress',\n            'createAccount', 'address'\n        ].forEach(key => {\n            this[key] = TronWeb[key];\n        });\n\n        if(privateKey)\n            this.setPrivateKey(privateKey);\n\n        this.transactionBuilder = new TransactionBuilder(this);\n        this.trx = new Trx(this);\n        this.utils = utils;\n\n        this.injectPromise = utils.promiseInjector(this);\n    }\n\n    setDefaultBlock(blockID = false) {\n        if([false, 'latest', 'earliest', 0].includes(blockID)) {\n            return this.defaultBlock = blockID;\n        }\n\n        if(!utils.isInteger(blockID) || !blockID)\n            throw new Error('Invalid block ID provided');\n\n        this.defaultBlock = Math.abs(blockID);\n    }\n\n    setPrivateKey(privateKey) {\n        try {\n            this.setAddress(\n                this.address.fromPrivateKey(privateKey)\n            );\n        } catch {\n            throw new Error('Invalid private key provided');\n        }\n\n        this.defaultPrivateKey = privateKey;\n        this.emit('privateKeyChanged', privateKey);\n    }\n\n    setAddress(address) {\n        if(!this.isAddress(address))\n            throw new Error('Invalid address provided');\n\n        const hex = this.address.toHex(address);\n        const base58 = this.address.fromHex(address);\n\n        if(this.defaultPrivateKey && this.address.fromPrivateKey(this.defaultPrivateKey) !== base58)\n            this.defaultPrivateKey = false;\n\n        this.defaultAddress = {\n            hex,\n            base58\n        };\n\n        this.emit('addressChanged', {hex, base58});\n    }\n\n    isValidProvider(provider) {\n        return Object.values(providers).some(knownProvider => provider instanceof knownProvider);\n    }\n\n    setFullNode(fullNode) {\n        if(utils.isString(fullNode))\n            fullNode = new providers.HttpProvider(fullNode);\n\n        if(!this.isValidProvider(fullNode))\n            throw new Error('Invalid full node provided');\n\n        this.fullNode = fullNode;\n        this.fullNode.setStatusPage('wallet/getnowblock');\n    }\n\n    setSolidityNode(solidityNode) {\n        if(utils.isString(solidityNode))\n            solidityNode = new providers.HttpProvider(solidityNode);\n\n        if(!this.isValidProvider(solidityNode))\n            throw new Error('Invalid solidity node provided');\n\n        this.solidityNode = solidityNode;\n        this.solidityNode.setStatusPage('walletsolidity/getnowblock');\n    }\n\n    setEventServer(eventServer = false) {\n        if(!eventServer)\n            return this.eventServer = false;\n\n        if(utils.isString(eventServer))\n            eventServer = new providers.HttpProvider(eventServer);\n\n        if(!this.isValidProvider(eventServer))\n            throw new Error('Invalid event server provided');\n\n        this.eventServer = eventServer;\n        this.eventServer.isConnected = () => this.eventServer.request('healthcheck').then(() => true).catch(() => (\n            this.eventServer.request('events?size=1').then(data => (\n                Array.isArray(data)\n            ))\n        )).catch(() => false);\n    }\n\n    currentProviders() {\n        return {\n            fullNode: this.fullNode,\n            solidityNode: this.solidityNode,\n            eventServer: this.eventServer\n        };\n    }\n\n    currentProvider() {\n        return this.currentProviders();\n    }\n\n\n    getEventResult(...params) {\n\n        if (typeof params[1] !== 'object') {\n            params[1] = {\n                sinceTimestamp: params[1] || 0,\n                eventName: params[2] || false,\n                blockNumber: params[3] || false,\n                size: params[4] || 20,\n                page: params[5] || 1\n            }\n            params.splice(2, 4)\n\n            // callback:\n            if (!utils.isFunction(params[2])) {\n\n                if (utils.isFunction(params[1].page)) {\n                    params[2] = params[1].page;\n                    params[1].page = 1;\n                } else if (utils.isFunction(params[1].size)) {\n                    params[2] = params[1].size;\n                    params[1].size = 20;\n                    params[1].page = 1;\n                }\n            }\n        }\n\n        return this._getEventResult(...params);\n    }\n\n    _getEventResult(contractAddress = false, options = {}, callback = false) {\n\n        let {\n            sinceTimestamp,\n            eventName,\n            blockNumber,\n            size,\n            page,\n            onlyConfirmed,\n            onlyUnconfirmed,\n            previousLastEventFingerprint\n        } = Object.assign({\n            sinceTimestamp: 0,\n            eventName: false,\n            blockNumber: false,\n            size: 20,\n            page: 1\n        }, options)\n\n        if(!callback)\n            return this.injectPromise(this.getEventResult, contractAddress, options);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        const routeParams = [];\n\n        if(!this.isAddress(contractAddress))\n            return callback('Invalid contract address provided');\n\n        if(eventName && !contractAddress)\n            return callback('Usage of event name filtering requires a contract address');\n\n        if(!utils.isInteger(sinceTimestamp))\n            return callback('Invalid sinceTimestamp provided');\n\n        if(!utils.isInteger(size))\n            return callback('Invalid size provided');\n\n        if(size > 200) {\n            console.warn('Defaulting to maximum accepted size: 200');\n            size = 200;\n        }\n\n        if(!utils.isInteger(page))\n            return callback('Invalid page provided');\n\n        if(blockNumber && !eventName)\n            return callback('Usage of block number filtering requires an event name');\n\n        if(contractAddress)\n            routeParams.push(this.address.fromHex(contractAddress));\n\n        if(eventName)\n            routeParams.push(eventName);\n\n        if(blockNumber)\n            routeParams.push(blockNumber);\n\n        const qs = {\n            since: sinceTimestamp,\n            size,\n            page\n        }\n\n        if(onlyConfirmed)\n            qs.onlyConfirmed = onlyConfirmed\n\n        if(onlyUnconfirmed && !onlyConfirmed)\n            qs.onlyUnconfirmed = onlyUnconfirmed\n\n        if (previousLastEventFingerprint)\n            qs.previousLastEventFingerprint = previousLastEventFingerprint\n\n        return this.eventServer.request(`event/contract/${routeParams.join('/')}?${querystring.stringify(qs)}`).then((data = false) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n    getEventByTransactionID(transactionID = false, callback = false) {\n        if(!callback)\n            return this.injectPromise(this.getEventByTransactionID, transactionID);\n\n        if(!this.eventServer)\n            callback('No event server configured');\n\n        return this.eventServer.request(`event/transaction/${transactionID}`).then((data = false) => {\n            if(!data)\n                return callback('Unknown error occurred');\n\n            if(!utils.isArray(data))\n                return callback(data);\n\n            return callback(null,\n                data.map(event => utils.mapEvent(event))\n            );\n        }).catch(err => callback((err.response && err.response.data) || err));\n    }\n\n    contract(abi = [], address = false) {\n        return new Contract(this, abi, address);\n    }\n\n    static get address() {\n        return {\n            fromHex(address) {\n                if(!utils.isHex(address))\n                    return address;\n\n                return utils.crypto.getBase58CheckAddress(\n                    utils.code.hexStr2byteArray(address.replace(/^0x/,'41'))\n                );\n            },\n            toHex(address) {\n                if(utils.isHex(address))\n                    return address.toLowerCase().replace(/^0x/, '41');\n\n                return utils.code.byteArray2hexStr(\n                    utils.crypto.decodeBase58Address(address)\n                ).toLowerCase();\n            },\n            fromPrivateKey(privateKey) {\n                try {\n                    return utils.crypto.pkToAddress(privateKey);\n                } catch {\n                    return false;\n                }\n            }\n        }\n    }\n\n    static sha3(string, prefix = true) {\n        return (prefix ? '0x' : '') + keccak256(string);\n    }\n\n    static toHex(val) {\n        if(utils.isBoolean(val))\n            return TronWeb.fromDecimal(+val);\n\n        if(utils.isBigNumber(val))\n            return TronWeb.fromDecimal(val);\n\n        if(typeof val === 'object')\n            return TronWeb.fromUtf8(JSON.stringify(val));\n\n        if(utils.isString(val)) {\n            if(/^(-|)0x/.test(val))\n                return val;\n\n            if(!isFinite(val))\n                return TronWeb.fromUtf8(val);\n        }\n\n        let result = TronWeb.fromDecimal(val);\n        if(result === '0xNaN') {\n            throw new Error('The passed value is not convertible to a hex string');\n        } else {\n            return result;\n        }\n    }\n\n    static toUtf8(hex) {\n        if(utils.isHex(hex)) {\n            hex = hex.replace(/^0x/, '');\n            return Buffer.from(hex, 'hex').toString('utf8');\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromUtf8(string) {\n        if(!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'utf8').toString('hex');\n    }\n\n    static toAscii(hex) {\n        if(utils.isHex(hex)) {\n            let str = \"\";\n            let i = 0, l = hex.length;\n            if(hex.substring(0, 2) === '0x') {\n                i = 2;\n            }\n            for(; i < l; i += 2) {\n                let code = parseInt(hex.substr(i, 2), 16);\n                str += String.fromCharCode(code);\n            }\n            return str;\n        } else {\n            throw new Error('The passed value is not a valid hex string');\n        }\n    }\n\n    static fromAscii(string, padding) {\n        if(!utils.isString(string)) {\n            throw new Error('The passed value is not a valid utf-8 string')\n        }\n        return '0x' + Buffer.from(string, 'ascii').toString('hex').padEnd(padding, '0');\n    }\n\n\n    static toDecimal(value) {\n        return TronWeb.toBigNumber(value).toNumber();\n    }\n\n    static fromDecimal(value) {\n        const number = TronWeb.toBigNumber(value);\n        const result = number.toString(16);\n\n        return number.isLessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n    }\n\n    static fromSun(sun) {\n        const trx = TronWeb.toBigNumber(sun).div(1_000_000);\n        return utils.isBigNumber(sun) ? trx : trx.toString(10);\n    }\n\n    static toSun(trx) {\n        const sun = TronWeb.toBigNumber(trx).times(1_000_000);\n        return utils.isBigNumber(trx) ? sun : sun.toString(10);\n    }\n\n    static toBigNumber(amount = 0) {\n        if(utils.isBigNumber(amount))\n            return amount;\n\n        if(utils.isString(amount) && /^(-|)0x/.test(amount))\n            return new BigNumber(amount.replace('0x', ''), 16);\n\n        return new BigNumber(amount.toString(10), 10);\n    }\n\n    static isAddress(address = false) {\n        if(!utils.isString(address))\n            return false;\n\n        // Convert HEX to Base58\n        if(address.length === 42) {\n            try {\n                return TronWeb.isAddress(\n                    utils.crypto.getBase58CheckAddress(\n                        utils.code.hexStr2byteArray(address) // it throws an error if the address starts with 0x\n                    )\n                );\n            } catch (err) {\n                return false;\n            }\n        }\n        try {\n            return utils.crypto.isAddressValid(address);\n        } catch (err) {\n            return false;\n        }\n    }\n\n    static async createAccount(callback = false) {\n        const account = utils.accounts.generateAccount();\n\n        if(callback)\n            callback(null, account);\n\n        return account;\n    }\n\n    async isConnected(callback = false) {\n        if(!callback)\n            return this.injectPromise(this.isConnected);\n\n        callback(null, {\n            fullNode: await this.fullNode.isConnected(),\n            solidityNode: await this.solidityNode.isConnected(),\n            eventServer: this.eventServer && await this.eventServer.isConnected()\n        });\n    }\n};\n"],"sourceRoot":""}